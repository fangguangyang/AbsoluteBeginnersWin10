[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: uwp73HeroExplorerCallingApiAndCreatingMd5Hash_high.mp4
Video File: uwp73HeroExplorerCallingApiAndCreatingMd5Hash_high.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Scroll Position: 219
Active Line: 221
Video Position: 33195

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Microsoft YaHei,50,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,50,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:04.94,Default,,0,0,0,,英雄图鉴 -- 计算 md5 哈希值和调用 api\N（翻译：Ben.imbushuo Wang，审核：章程）
Dialogue: 0,0:00:04.94,0:00:09.94,Default,,0,0,0,,接下来我们想要获取数据并将其反序列化 (Deserialize)
Dialogue: 0,0:00:10.18,0:00:13.27,Default,,0,0,0,,到我们的模型之中。
Dialogue: 0,0:00:14.48,0:00:16.69,Default,,0,0,0,,然而，在这么做之前，我们需要
Dialogue: 0,0:00:16.69,0:00:19.03,Default,,0,0,0,,调用漫威动画的接口。为了达成这个目标
Dialogue: 0,0:00:19.03,0:00:21.88,Default,,0,0,0,,我们需要知道怎么去生成一个 MD5 哈希值。
Dialogue: 0,0:00:21.89,0:00:24.94,Default,,0,0,0,,而且我不跟你开玩笑地说，我对此毫无想法。
Dialogue: 0,0:00:24.95,0:00:29.62,Default,,0,0,0,,如果不是有人在网上发了参考代码，我可能就不知道怎能计算这个了。
Dialogue: 0,0:00:29.62,0:00:35.73,Default,,0,0,0,,这是2015/2016年的软件开发之美
Dialogue: 0,0:00:35.73,0:00:41.33,Default,,0,0,0,,而不是像我一样在互联网出现之前学习编程（如果你能想象的话）
Dialogue: 0,0:00:41.33,0:00:47.21,Default,,0,0,0,,但是说回来，如果你想学习更多东西，我会告诉你答案
Dialogue: 0,0:00:47.21,0:00:51.09,Default,,0,0,0,,我很高兴把你带领到那里（指答案处）
Dialogue: 0,0:00:51.09,0:00:57.59,Default,,0,0,0,,让我们从大致了解我们需要在我们的 GetCharacterList() 里所做的事情开始。
Dialogue: 0,0:00:57.59,0:01:06.22,Default,,0,0,0,,我们需要组装我们所用于调用的 URL
Dialogue: 0,0:01:06.22,0:01:11.21,Default,,0,0,0,,以获得其 MD5 哈希值。
Dialogue: 0,0:01:11.21,0:01:14.76,Default,,0,0,0,,然后我们将调用 API
Dialogue: 0,0:01:14.76,0:01:18.25,Default,,0,0,0,,并得到一个（来自 API 的）回复
Dialogue: 0,0:01:18.25,0:01:25.33,Default,,0,0,0,,然后我们需要将回复转换到一个字符串
Dialogue: 0,0:01:25.33,0:01:29.79,Default,,0,0,0,,这个字符串代表 JSON 数据
Dialogue: 0,0:01:29.79,0:01:32.87,Default,,0,0,0,,也就是我们想要反序列化 (Deserialize) 的
Dialogue: 0,0:01:32.87,0:01:42.77,Default,,0,0,0,,如果你想回忆一下我们反序列化 (Deserialize) JSON 数据的方法
Dialogue: 0,0:01:42.77,0:01:46.01,Default,,0,0,0,,那就是使用 DataContractJsonSerializer 。
Dialogue: 0,0:01:47.10,0:01:49.77,Default,,0,0,0,,但是这可能会有些麻烦
Dialogue: 0,0:01:49.77,0:01:52.23,Default,,0,0,0,,我们需要探究一二。
Dialogue: 0,0:01:52.74,0:01:56.56,Default,,0,0,0,,组装请求用的 URL 是很简单的事情
Dialogue: 0,0:01:56.56,0:02:05.11,Default,,0,0,0,,让我们返回我们的互动式 API 文档
Dialogue: 0,0:02:05.11,0:02:09.50,Default,,0,0,0,,并再次运行我们所需要的这类查询
Dialogue: 0,0:02:09.51,0:02:16.69,Default,,0,0,0,,就像之前给定一个随机差值（比如100），并只返回十个结果
Dialogue: 0,0:02:16.69,0:02:19.07,Default,,0,0,0,,我们点击 “试一下” (Try out) 按钮，它应该返回给我们
Dialogue: 0,0:02:20.11,0:02:24.87,Default,,0,0,0,,我们需要使用的请求 URL 格式。
Dialogue: 0,0:02:28.50,0:02:31.28,Default,,0,0,0,,我们需要的也就是请求 URL 本体。
Dialogue: 0,0:02:31.28,0:02:38.96,Default,,0,0,0,,我将选中这个 URL 并复制回去，我们将创建一个名叫 URL 的字符串类型变量 (string URL)
Dialogue: 0,0:02:40.04,0:02:42.12,Default,,0,0,0,,初始值等于(equals) String.Format() 返回的结果。
Dialogue: 0,0:02:42.12,0:02:46.92,Default,,0,0,0,,然后我们将复制这个长 URL 。
Dialogue: 0,0:02:46.92,0:02:51.92,Default,,0,0,0,,接下来我们要在这里创造更多的空间（空格）
Dialogue: 0,0:02:52.55,0:02:56.71,Default,,0,0,0,,然后把这里硬编码为10
Dialogue: 0,0:02:56.71,0:03:00.21,Default,,0,0,0,,如果你愿意，你可以把这个数值替换为
Dialogue: 0,0:03:00.21,0:03:04.11,Default,,0,0,0,,15, 20 或者 100，总之可以是任意你想要的数字。
Dialogue: 0,0:03:04.11,0:03:08.07,Default,,0,0,0,,我们将要变更这个偏差值
Dialogue: 0,0:03:08.07,0:03:10.89,Default,,0,0,0,,与此同时也更换 API 密钥
Dialogue: 0,0:03:10.89,0:03:18.10,Default,,0,0,0,,然后我们将在 （这个 URL ）最后附加哈希。（我们将在后面讨论哈希）
Dialogue: 0,0:03:18.99,0:03:21.51,Default,,0,0,0,,接下来我们要做的第一件事情
Dialogue: 0,0:03:21.51,0:03:24.67,Default,,0,0,0,,是创建随机类 (Random) 的一个实例
Dialogue: 0,0:03:28.97,0:03:33.97,Default,,0,0,0,,我们将用它来取得新的偏差值。
Dialogue: 0,0:03:34.43,0:03:37.65,Default,,0,0,0,,我偶然得知这里一共有1500个角色
Dialogue: 0,0:03:37.66,0:03:39.61,Default,,0,0,0,,我将在这里硬编码
Dialogue: 0,0:03:39.62,0:03:41.81,Default,,0,0,0,,但是我可能应当在某个合适的时机将它填到一个常量里。
Dialogue: 0,0:03:41.82,0:03:46.81,Default,,0,0,0,,所以我们把这个变量称之为 offset
Dialogue: 0,0:03:47.10,0:03:57.95,Default,,0,0,0,,初始值等于 random.Next() ，我将给定其可以生成的随机值上限为1500。
Dialogue: 0,0:03:59.64,0:04:02.90,Default,,0,0,0,,一旦我得到了偏差值
Dialogue: 0,0:04:02.90,0:04:06.38,Default,,0,0,0,,我就可以在这里 （URL） 中提供。
Dialogue: 0,0:04:06.38,0:04:09.08,Default,,0,0,0,,接下来我要做的是提供 API 密钥
Dialogue: 0,0:04:09.08,0:04:13.32,Default,,0,0,0,,我目前要完成的是
Dialogue: 0,0:04:13.32,0:04:16.56,Default,,0,0,0,,创建一组私有常量。
Dialogue: 0,0:04:16.56,0:04:21.56,Default,,0,0,0,,名叫 私钥(PrivateKey) 的私有访问 (private) 的字符串类型 (string) 常量 (const)
Dialogue: 0,0:04:21.75,0:04:31.35,Default,,0,0,0,,接下来是另一个叫公钥的私有常量
Dialogue: 0,0:04:31.35,0:04:35.77,Default,,0,0,0,,接下来我将创建另一个
Dialogue: 0,0:04:35.77,0:04:40.77,Default,,0,0,0,,名叫 MaxCharacters 的私有访问整数常量
Dialogue: 0,0:04:42.98,0:04:46.93,Default,,0,0,0,,值等于 1500 ， 接下来 and we'll just do MaxCharacters
Dialogue: 0,0:04:49.50,0:04:53.60,Default,,0,0,0,,然后我们会在这里填入公钥。
Dialogue: 0,0:04:54.94,0:04:57.08,Default,,0,0,0,,接下来我们要做的是
Dialogue: 0,0:04:57.08,0:04:59.96,Default,,0,0,0,,真正地枚举公私钥。
Dialogue: 0,0:05:00.97,0:05:11.34,Default,,0,0,0,,这也就是和我的个人信息（指账号）密切相关的东西，我将在完成录制这一系列视频后删除我的账号。
Dialogue: 0,0:05:11.34,0:05:14.18,Default,,0,0,0,,所以这个密钥将不会工作，你得自己去申请一个。
Dialogue: 0,0:05:14.18,0:05:15.72,Default,,0,0,0,,不要试图复制我的密钥。
Dialogue: 0,0:05:15.72,0:05:24.35,Default,,0,0,0,,将公私钥分别填在对应的地方。
Dialogue: 0,0:05:28.77,0:05:30.81,Default,,0,0,0,,接下来我们要做的是
Dialogue: 0,0:05:30.81,0:05:35.81,Default,,0,0,0,,真正计算获得 MD5 哈希值
Dialogue: 0,0:05:36.89,0:05:44.73,Default,,0,0,0,,我知道我目前需要做的是创建一个静态私有的方法 (private static)
Dialogue: 0,0:05:44.74,0:05:49.61,Default,,0,0,0,,这个叫做 CreateHash() 的方法将会返回一个字符串。
Dialogue: 0,0:05:49.62,0:05:59.11,Default,,0,0,0,,让我们创建一个叫 toBeHashed 的变量，等于……
Dialogue: 0,0:06:00.23,0:06:04.07,Default,,0,0,0,,我们需要一个时间戳和私钥
Dialogue: 0,0:06:05.67,0:06:07.52,Default,,0,0,0,,以及公钥。
Dialogue: 0,0:06:08.68,0:06:11.40,Default,,0,0,0,,我们将把这三者合并起来。
Dialogue: 0,0:06:11.40,0:06:15.70,Default,,0,0,0,,说到时间戳的话，如果你仔细阅读了文档
Dialogue: 0,0:06:15.70,0:06:20.08,Default,,0,0,0,,在 “如何” (How To) 章节的授权子章节下面
Dialogue: 0,0:06:20.08,0:06:24.34,Default,,0,0,0,,文档表示时间戳可以使用任意长字符串
Dialogue: 0,0:06:24.34,0:06:27.62,Default,,0,0,0,,随着请求而变更。
Dialogue: 0,0:06:27.62,0:06:29.56,Default,,0,0,0,,因此你没有为此抓狂。
Dialogue: 0,0:06:29.56,0:06:32.40,Default,,0,0,0,,我将使用 DateTime.Now.Ticks
Dialogue: 0,0:06:32.40,0:06:34.38,Default,,0,0,0,,它将给我们一个（随时间）唯一的字符串
Dialogue: 0,0:06:34.38,0:06:39.80,Default,,0,0,0,,代表从过去的某一时间点开始计算已经过去了多少毫秒。
Dialogue: 0,0:06:39.80,0:06:46.64,Default,,0,0,0,,所以我们创建一个叫 timestamp 的变量，初始值等于 DateTime.Now.Ticks.ToString() 。
Dialogue: 0,0:06:48.14,0:06:50.15,Default,,0,0,0,,这样就应该好了。
Dialogue: 0,0:06:50.80,0:06:52.22,Default,,0,0,0,,接下来我要做的是
Dialogue: 0,0:06:52.22,0:06:54.40,Default,,0,0,0,,真正计算哈希。
Dialogue: 0,0:06:54.40,0:06:58.24,Default,,0,0,0,,问题是我对怎么完成这个毫无头绪。
Dialogue: 0,0:06:58.24,0:07:03.24,Default,,0,0,0,,难道没有人在伟大的互联网上
Dialogue: 0,0:07:03.66,0:07:06.00,Default,,0,0,0,,找到了解决方案
Dialogue: 0,0:07:06.00,0:07:09.76,Default,,0,0,0,,并慷慨地在 StackOverflow 的某个问题下添加回复吗？
Dialogue: 0,0:07:09.76,0:07:14.14,Default,,0,0,0,,我将给你这个问题的 URL 。
Dialogue: 0,0:07:14.14,0:07:17.86,Default,,0,0,0,,我大致花了三天时间尝试学习
Dialogue: 0,0:07:17.86,0:07:20.96,Default,,0,0,0,,如何创建我自己的哈希，我学到了很多
Dialogue: 0,0:07:20.96,0:07:30.60,Default,,0,0,0,,但最终我并没有成功创建一个可以工作的实现，因此我从互联网上剽窃了有关这些内容的五行代码。
Dialogue: 0,0:07:30.60,0:07:38.06,Default,,0,0,0,,我接下来将检查所有程序集引用 (Reference) 已经使用 using 语句添加，在此，我想推荐
Dialogue: 0,0:07:38.10,0:07:41.30,Default,,0,0,0,,如果你真的想学习这些东西是怎么工作的
Dialogue: 0,0:07:41.30,0:07:53.17,Default,,0,0,0,,在 MicrosoftVirtualAcademy.com 上有很多关于安全的东西可供你查看。
Dialogue: 0,0:07:53.17,0:07:54.47,Default,,0,0,0,,也许在那里有一些不错的书籍。
Dialogue: 0,0:07:54.47,0:07:56.79,Default,,0,0,0,,去 MSDN 上看看这里每一个引用的对象
Dialogue: 0,0:07:56.79,0:08:00.67,Default,,0,0,0,,和每一个对象里的方法
Dialogue: 0,0:08:00.67,0:08:02.41,Default,,0,0,0,,了解它们的用法和使用原理，是有显著好处的。
Dialogue: 0,0:08:02.41,0:08:05.43,Default,,0,0,0,,我仅仅只需要
Dialogue: 0,0:08:05.43,0:08:09.24,Default,,0,0,0,,计算给定值的 MD5 哈希值
Dialogue: 0,0:08:09.24,0:08:12.42,Default,,0,0,0,,然后我得到的是正确的 MD5 哈希值。
Dialogue: 0,0:08:14.27,0:08:18.89,Default,,0,0,0,,变量 hashedMessage 等于……
Dialogue: 0,0:08:19.75,0:08:25.59,Default,,0,0,0,,computeMD5() 方法的返回值，我将在这里传入要被哈希的内容，然后返回
Dialogue: 0,0:08:25.59,0:08:30.05,Default,,0,0,0,,被哈希的内容。
Dialogue: 0,0:08:30.05,0:08:35.05,Default,,0,0,0,,然后我们就获得了哈希。
Dialogue: 0,0:08:35.13,0:08:42.58,Default,,0,0,0,,新建 hash 变量，初始值等于 CreateHash
Dialogue: 0,0:08:44.29,0:08:54.57,Default,,0,0,0,,然后我要把这个哈希值放到我们前面这个 url 的后面
Dialogue: 0,0:08:54.57,0:08:58.74,Default,,0,0,0,,还有哈希值
Dialogue: 0,0:08:58.75,0:09:00.49,Default,,0,0,0,,啊对，就是哈希值和时间戳
Dialogue: 0,0:09:00.49,0:09:02.35,Default,,0,0,0,,因为这样就包含它所需要的所有东西了。
Dialogue: 0,0:09:02.35,0:09:06.21,Default,,0,0,0,,所以，我将输入……字符串(String)
Dialogue: 0,0:09:07.06,0:09:09.07,Default,,0,0,0,,啊，我觉得我可以通过相当多样的方法来处理这个东西。
Dialogue: 0,0:09:09.07,0:09:10.67,Default,,0,0,0,,让我们继续，在一步内完成这些事情。
Dialogue: 0,0:09:10.67,0:09:12.57,Default,,0,0,0,,（事实上，我改变想法了）
Dialogue: 0,0:09:12.57,0:09:17.18,Default,,0,0,0,,我们要先做那一步，然后创建 URL 。
Dialogue: 0,0:09:17.18,0:09:19.40,Default,,0,0,0,,在 URL 的末尾，我将加上
Dialogue: 0,0:09:19.40,0:09:24.04,Default,,0,0,0,,加入时间戳等于……并稍后替换进去(使用String.Format方法)
Dialogue: 0,0:09:24.04,0:09:29.03,Default,,0,0,0,,然后是哈希等于……好了。
Dialogue: 0,0:09:32.24,0:09:38.02,Default,,0,0,0,,然后，为了获得（哈希），我需要传入时间戳。
Dialogue: 0,0:09:38.63,0:09:43.25,Default,,0,0,0,,不幸的是，我需要在这里更改一些内容。
Dialogue: 0,0:09:43.25,0:09:45.58,Default,,0,0,0,,创建字符串参数 timestamp
Dialogue: 0,0:09:46.79,0:09:48.47,Default,,0,0,0,,然后传进去。
Dialogue: 0,0:09:50.55,0:09:54.57,Default,,0,0,0,,但是我需要在这里能够访问
Dialogue: 0,0:09:57.82,0:10:00.28,Default,,0,0,0,,然后稍后也能传入它。
Dialogue: 0,0:10:01.19,0:10:03.52,Default,,0,0,0,,时间戳解决了，很好。
Dialogue: 0,0:10:05.13,0:10:12.81,Default,,0,0,0,,接下来我将使用 HTTP 客户端 (HttpClient)
Dialogue: 0,0:10:16.50,0:10:19.86,Default,,0,0,0,,命名为 http ，然后我需要使用 using 语句来声明使用它。
Dialogue: 0,0:10:19.86,0:10:27.81,Default,,0,0,0,,using System.Net.Http 等于 new HttpClient
Dialogue: 0,0:10:27.82,0:10:36.57,Default,,0,0,0,,这将允许我们在代码中直接使用 http.GetAsync() 方法来传入请求 URI (requestURI)，
Dialogue: 0,0:10:36.58,0:10:43.32,Default,,0,0,0,,把 URL 给它，我得到的返回内容应该是一个可等待的对象。
Dialogue: 0,0:10:43.32,0:10:54.72,Default,,0,0,0,,我从可等待对象得到的返回结果应当是 HttpResponseMessage 类型的。
Dialogue: 0,0:10:54.72,0:10:55.97,Default,,0,0,0,,我注意到你得到了红色波浪线
Dialogue: 0,0:10:55.97,0:11:01.23,Default,,0,0,0,,这是因为你需要在这里添加异步 (async) 关键字
Dialogue: 0,0:11:01.23,0:11:04.71,Default,,0,0,0,,我觉得这就是你目前需要做的所有事情，等一下我们会回来的。
Dialogue: 0,0:11:04.72,0:11:06.07,Default,,0,0,0,,好，我们继续。
Dialogue: 0,0:11:06.07,0:11:09.37,Default,,0,0,0,,我们得到了返回的内容
Dialogue: 0,0:11:09.38,0:11:12.73,Default,,0,0,0,,我需要把返回的内容阅读到一个字符串里。
Dialogue: 0,0:11:12.73,0:11:16.72,Default,,0,0,0,,创建字符串变量  jsonMessage ，等于
Dialogue: 0,0:11:16.72,0:11:25.57,Default,,0,0,0,,等于 response.Content ，啊不，Content.ReadAsStringAsync() ,它将给我们
Dialogue: 0,0:11:26.21,0:11:28.32,Default,,0,0,0,,JSON 消息本体。
Dialogue: 0,0:11:28.32,0:11:33.53,Default,,0,0,0,,我有它在手了。因为这个方法是异步的，我要把这个声明为等待 (awaitable) 的操作。
Dialogue: 0,0:11:35.06,0:11:43.32,Default,,0,0,0,,接下来我要把返回的 JSON 消息反序列化到我的类中。
Dialogue: 0,0:11:43.33,0:11:49.86,Default,,0,0,0,,我将使用 DataContractJsonSerializer 完成这件事情
Dialogue: 0,0:11:50.32,0:11:54.26,Default,,0,0,0,,我们已经在项目中引用了相关的库。
Dialogue: 0,0:11:54.26,0:12:01.24,Default,,0,0,0,,我将点击弹出的浮动菜单并添加对 System.Runtime.Serialization.Json 命名空间的引用。
Dialogue: 0,0:12:02.47,0:12:08.25,Default,,0,0,0,,这样它就能被识别了，接下来我将创建序列器 (Serializer)
Dialogue: 0,0:12:09.50,0:12:13.32,Default,,0,0,0,,也就是一个新的 DataContractJsonSerializer 类实例
Dialogue: 0,0:12:13.32,0:12:26.92,Default,,0,0,0,,指定类型是角色数据的包装类 (Character data wrapper) : CharacterDataWrapper 。
Dialogue: 0,0:12:26.92,0:12:27.48,Default,,0,0,0,,现在为什么我没有看到它呢？
Dialogue: 0,0:12:27.48,0:12:31.50,Default,,0,0,0,,因为我没有为模型类添加 using 引用声明。
Dialogue: 0,0:12:31.50,0:12:36.16,Default,,0,0,0,,所以 using HeroExplorer.Models 声明应当解决引用问题。
Dialogue: 0,0:12:38.37,0:12:46.38,Default,,0,0,0,,接下来我需要一个内存流对象 (MemoryStream) 。哎呀， 给内存流命名ms（而不是me）。
Dialogue: 0,0:12:48.96,0:12:51.18,Default,,0,0,0,,让我们确保我们为其添加了 using 声明。
Dialogue: 0,0:12:51.18,0:12:59.84,Default,,0,0,0,,(using) System.IO ， 我们将在内存流中堆一些东西
Dialogue: 0,0:12:59.84,0:13:03.94,Default,,0,0,0,,内存流将存着我们需要的信息，接下来我们将把它们
Dialogue: 0,0:13:03.94,0:13:10.08,Default,,0,0,0,,传给序列器，序列器会从内存流中把东西取出，然后反序列化
Dialogue: 0,0:13:10.08,0:13:19.14,Default,,0,0,0,,并最后将其从 CharacterDataWrapper 的根节点开始，以对象的形式传回给我们。
Dialogue: 0,0:13:19.14,0:13:26.64,Default,,0,0,0,,所以我们需要以设置编码为 Encoding.UTF8 开始
Dialogue: 0,0:13:26.64,0:13:30.76,Default,,0,0,0,,也就是我们预期中的 JSON 的编码格式
Dialogue: 0,0:13:30.76,0:13:33.84,Default,,0,0,0,,然后将字节取出
Dialogue: 0,0:13:36.12,0:13:44.27,Default,,0,0,0,,简单地把这串 JSON 信息字符串转换到一个基于 UTF-8 编码的字节数组
Dialogue: 0,0:13:44.27,0:13:46.27,Default,,0,0,0,,然后把它们放到内存流里。
Dialogue: 0,0:13:46.27,0:13:50.30,Default,,0,0,0,,然后这就应该是一个新的内存流了。
Dialogue: 0,0:13:51.57,0:14:00.91,Default,,0,0,0,,然后，如果我们把这么多繁杂的事情做好，我们就应该处理内存中的对象
Dialogue: 0,0:14:02.06,0:14:14.81,Default,,0,0,0,,我们将把其读入一个叫 result 的变量中
Dialogue: 0,0:14:15.40,0:14:28.93,Default,,0,0,0,,如果一切良好，我们应该得到 CharacterDataWrapper 类的对象。 就这样。
Dialogue: 0,0:14:29.66,0:14:32.32,Default,,0,0,0,,接下来如果我们想让其工作的话
Dialogue: 0,0:14:32.32,0:14:44.78,Default,,0,0,0,,我们需要用一个 CharacterDataWrapper 类的实例 (Task<CharacterDataWrapper>) 来返回我们想要的结果。
Dialogue: 0,0:14:47.83,0:14:52.85,Default,,0,0,0,,为什么大家不高兴呢？因为你目前的返回类型是 void 。
Dialogue: 0,0:14:52.85,0:14:55.31,Default,,0,0,0,,现在万事看上去正常，大家都很高兴，对吧？
Dialogue: 0,0:14:55.31,0:14:57.33,Default,,0,0,0,,编译解决方案。
Dialogue: 0,0:15:05.23,0:15:06.75,Default,,0,0,0,,很好，编译通过了。
Dialogue: 0,0:15:07.58,0:15:10.89,Default,,0,0,0,,接下来我们要做的，
Dialogue: 0,0:15:11.90,0:15:16.69,Default,,0,0,0,,让我看看……在我们的 MainPage.xaml 里
Dialogue: 0,0:15:16.69,0:15:19.75,Default,,0,0,0,,我将添加一个按钮，当我们点击它的时候
Dialogue: 0,0:15:19.75,0:15:21.15,Default,,0,0,0,,整个流程将会启动。
Dialogue: 0,0:15:21.15,0:15:23.79,Default,,0,0,0,,我只是想验证它是不是将我所需要的数据返回了。
Dialogue: 0,0:15:23.79,0:15:26.67,Default,,0,0,0,,一旦我们获得了数据，然后将其反序列化
Dialogue: 0,0:15:26.67,0:15:28.87,Default,,0,0,0,,我们就可以开始用户界面的工作。
Dialogue: 0,0:15:28.87,0:15:40.04,Default,,0,0,0,,但与此同时，我希望确认一下我们能做到那步。。。
Dialogue: 0,0:15:42.52,0:15:47.52,Default,,0,0,0,,所以我希望调用一下 MarvelFacade 。
Dialogue: 0,0:15:48.46,0:15:52.39,Default,,0,0,0,,啊呀，为什么不是我想看到的东西呢……
Dialogue: 0,0:15:52.74,0:15:57.74,Default,,0,0,0,,因为我需要使其为静态类型。好了。
Dialogue: 0,0:16:00.03,0:16:02.80,Default,,0,0,0,,使用静态类型后，我就不需要创建 MarvelFacade 的实例了。
Dialogue: 0,0:16:02.80,0:16:07.82,Default,,0,0,0,,我不需要为让它带回一点东西而创建一个引用实例。
Dialogue: 0,0:16:07.82,0:16:09.48,Default,,0,0,0,,你知道，它并没有任何状态。
Dialogue: 0,0:16:10.20,0:16:12.73,Default,,0,0,0,,所以目前它应该工作了。
Dialogue: 0,0:16:12.73,0:16:17.73,Default,,0,0,0,,创建一个叫 data 的变量，使其值等于调用上述方法的返回值。
Dialogue: 0,0:16:18.07,0:16:19.94,Default,,0,0,0,,这就是我想做的所有事情。
Dialogue: 0,0:16:21.25,0:16:24.61,Default,,0,0,0,,让我在这里创建一个断点 (Breakpoint)
Dialogue: 0,0:16:25.75,0:16:29.10,Default,,0,0,0,,呀，点在了我所担心的地方。
Dialogue: 0,0:16:29.10,0:16:31.88,Default,,0,0,0,,我非常自信一切正常。
Dialogue: 0,0:16:31.88,0:16:40.07,Default,,0,0,0,,我对这儿有一点儿担心，但我不能解释原因。
Dialogue: 0,0:16:40.07,0:16:42.94,Default,,0,0,0,,让我们看看它会不会工作。
Dialogue: 0,0:16:46.91,0:16:56.32,Default,,0,0,0,,如果我们遇上了问题，那么可能是返回的 JSON 和我们所使用的类之间不匹配。
Dialogue: 0,0:16:56.32,0:16:59.13,Default,,0,0,0,,这个小按钮应该能工作。
Dialogue: 0,0:16:59.94,0:17:03.56,Default,,0,0,0,,我弄错了数据类型。
Dialogue: 0,0:17:03.57,0:17:06.79,Default,,0,0,0,,所以我需要解决一下。
Dialogue: 0,0:17:06.79,0:17:13.62,Default,,0,0,0,,我们尚未触发断点。。。。也没有触发异常。。。
Dialogue: 0,0:17:13.62,0:17:17.15,Default,,0,0,0,,这个 app 很勤勉呢！
Dialogue: 0,0:17:17.15,0:17:25.08,Default,,0,0,0,,我之后又在调试模式跑了几次，我终于发现问题了，\N幸运的是，这个 bug 很好改
Dialogue: 0,0:17:25.08,0:17:37.54,Default,,0,0,0,,看上去很不错，让我们看一下 URL。我没法在屏幕右侧看全整个 URL，但是看上去是一个合规的 URL 。
Dialogue: 0,0:17:38.02,0:17:40.34,Default,,0,0,0,,嗯，让我们继续，然后看看会发生什么。
Dialogue: 0,0:17:43.33,0:17:45.64,Default,,0,0,0,,发送请求，得到结果
Dialogue: 0,0:17:46.73,0:17:48.70,Default,,0,0,0,,把结果放入内存流，传入我们的反序列器中
Dialogue: 0,0:17:48.70,0:17:51.72,Default,,0,0,0,,接下来就是我紧张的地方了。。。
Dialogue: 0,0:17:51.72,0:17:54.15,Default,,0,0,0,,前方娇喘福利！\N\N\N嗯，可以了。一颗赛艇！
Dialogue: 0,0:17:55.75,0:17:59.10,Default,,0,0,0,,哦~~~耶~~~（boy next door~~）
Dialogue: 0,0:17:59.10,0:18:01.90,Default,,0,0,0,,列出十条结果，让我们看一下其中的一个结果。
Dialogue: 0,0:18:01.90,0:18:03.88,Default,,0,0,0,,“弗兰肯斯坦的怪物” ("Frankenstein's Monster") 。
Dialogue: 0,0:18:03.88,0:18:05.82,Default,,0,0,0,,接下来我将告诉你我们下节课要做的事情。
Dialogue: 0,0:18:07.50,0:18:09.27,Default,,0,0,0,,我对此很高兴。
Dialogue: 0,0:18:09.27,0:18:12.97,Default,,0,0,0,,我们从漫威动画的 API 那取回了数据
Dialogue: 0,0:18:12.97,0:18:16.23,Default,,0,0,0,,我为第一次尝试就取得成功感到激动。
Dialogue: 0,0:18:16.23,0:18:20.21,Default,,0,0,0,,下节课我们将驾驭取回的数据
Dialogue: 0,0:18:20.21,0:18:24.01,Default,,0,0,0,,我们将会绑定数据并使其显示在屏幕上。
Dialogue: 0,0:18:24.01,0:18:25.15,Default,,0,0,0,,那会是非常令人激动的事情。
Dialogue: 0,0:18:25.15,0:18:27.59,Default,,0,0,0,,下一节课程见。谢谢大家。
Dialogue: 0,0:18:27.59,0:18:34.06,Default,,0,0,0,,微软大法好！
Dialogue: 0,0:18:34.06,0:18:36.06,Default,,0,0,0,,
