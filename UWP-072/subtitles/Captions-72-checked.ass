[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: uwp72HeroExplorerAccessingMarvelWebApi_high.mp4
Video File: uwp72HeroExplorerAccessingMarvelWebApi_high.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Microsoft YaHei,50,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,50,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:04.11,Default,,0,0,0,,英雄图鉴 -- 介绍漫威 API\N（翻译：Ben.imbushuo Wang，审核：章程）
Dialogue: 0,0:00:04.11,0:00:06.10,Default,,0,0,0,,各位好，你们知道在视频中，我将先
Dialogue: 0,0:00:06.11,0:00:10.88,Default,,0,0,0,,着手处理应用中最麻烦的内容
Dialogue: 0,0:00:10.89,0:00:13.24,Default,,0,0,0,,在本例子中
Dialogue: 0,0:00:13.25,0:00:15.80,Default,,0,0,0,,我感觉到，一路上我们会遇到很多麻烦的事情
Dialogue: 0,0:00:15.81,0:00:18.98,Default,,0,0,0,,正因为如此，我也就先从处理这些事情开始。
Dialogue: 0,0:00:18.99,0:00:21.58,Default,,0,0,0,,我认为我们会遇到的第一件事情是
Dialogue: 0,0:00:21.59,0:00:27.53,Default,,0,0,0,,了解如何调用漫威动画的API并取得其返回的信息。
Dialogue: 0,0:00:27.53,0:00:32.19,Default,,0,0,0,,接下来，反序列化(Deserialize)我们取得的任何信息到类的实例中
Dialogue: 0,0:00:32.19,0:00:35.05,Default,,0,0,0,,然后在我们的应用程序中使用它们。
Dialogue: 0,0:00:35.05,0:00:41.26,Default,,0,0,0,,接下来，我将介绍在你的应用里使用漫威动画API前你需要完成的那些事项：
Dialogue: 0,0:00:41.27,0:00:46.24,Default,,0,0,0,,首先你需要注册一个开发者账号
Dialogue: 0,0:00:46.24,0:00:51.20,Default,,0,0,0,,你可以看见我已经打开了 URL developer.marvel.com
Dialogue: 0,0:00:51.20,0:00:55.62,Default,,0,0,0,,然后你会看到一个 “从这里开始” (Get Started) 的链接
Dialogue: 0,0:00:55.62,0:00:58.78,Default,,0,0,0,,它将会带你完成整个注册流程。
Dialogue: 0,0:00:58.78,0:01:01.20,Default,,0,0,0,,注册十分简单，你并不需要提供太多的信息
Dialogue: 0,0:01:01.20,0:01:09.03,Default,,0,0,0,,他们只需要知道使用 API 的人和使用的理由
Dialogue: 0,0:01:09.04,0:01:15.05,Default,,0,0,0,,因为他们在对使用 API 盈利这件事情上有所限制。
Dialogue: 0,0:01:15.06,0:01:24.95,Default,,0,0,0,,我希望你完整阅读 （许可条款），并了解你可能会遇到的情况，特别是如果你在考虑在应用内使用漫威 API 并将其分发到应用商店的话。
Dialogue: 0,0:01:24.96,0:01:26.35,Default,,0,0,0,,但是我并不是一个律师
Dialogue: 0,0:01:26.36,0:01:28.59,Default,,0,0,0,,我将把这些事情留给你和漫威动画。
Dialogue: 0,0:01:28.59,0:01:32.43,Default,,0,0,0,,在注册好开发者账户后
Dialogue: 0,0:01:32.44,0:01:36.51,Default,,0,0,0,,接下来你可能想做的是学习一下如何使用它们。
Dialogue: 0,0:01:36.52,0:01:41.43,Default,,0,0,0,,幸运的是，他们提供了很好的交互式文档。
Dialogue: 0,0:01:41.44,0:01:48.01,Default,,0,0,0,,你可以看一下多种调用 API 的方法，以及你可以获取的信息。
Dialogue: 0,0:01:48.02,0:01:52.03,Default,,0,0,0,,举个例子，你可以获得一个角色列表
Dialogue: 0,0:01:52.04,0:01:53.51,Default,,0,0,0,,或是单个角色
Dialogue: 0,0:01:53.52,0:01:56.21,Default,,0,0,0,,或是涉及到某角色的所有动画
Dialogue: 0,0:01:56.21,0:01:59.49,Default,,0,0,0,,亦或是跟某个角色有关的事件、系列或是故事们。
Dialogue: 0,0:01:59.49,0:02:02.04,Default,,0,0,0,,你可以甚至获得一个漫画列表。
Dialogue: 0,0:02:02.05,0:02:04.31,Default,,0,0,0,,你可以用某些方法来筛选返回的内容
Dialogue: 0,0:02:04.32,0:02:06.59,Default,,0,0,0,,你可以获得某本漫画
Dialogue: 0,0:02:06.60,0:02:07.99,Default,,0,0,0,,或是此漫画中的所有角色
Dialogue: 0,0:02:08.00,0:02:11.47,Default,,0,0,0,,或是此漫画的作者
Dialogue: 0,0:02:11.47,0:02:14.47,Default,,0,0,0,,或是跟此漫画有关的所有事件和故事。
Dialogue: 0,0:02:14.47,0:02:16.17,Default,,0,0,0,,你大概已经对此略有了解。
Dialogue: 0,0:02:16.17,0:02:21.55,Default,,0,0,0,,接下来你看到的是高层次的应用程序接口调用概览
Dialogue: 0,0:02:21.56,0:02:29.11,Default,,0,0,0,,你可以点击其中的某一个接口，学习这个接口的作用和它能返回给你的数据。
Dialogue: 0,0:02:29.12,0:02:43.65,Default,,0,0,0,,在这个例子中，我猜你可以说这是在你调用这个 API 时会返回的模型(Model) ，和此信息有关的类和属性们。
Dialogue: 0,0:02:43.66,0:02:53.05,Default,,0,0,0,,这里甚至有一个交互式环境来帮助你测试接口的输入参数。
Dialogue: 0,0:02:53.06,0:03:01.43,Default,,0,0,0,,在接下来的输入样例中，我将请求接口并返回前十个名字以 SP 开头的漫画角色。
Dialogue: 0,0:03:01.43,0:03:05.73,Default,,0,0,0,,你可以点击 Try it out! 按钮，它将会显示你所请求的URL
Dialogue: 0,0:03:05.73,0:03:14.53,Default,,0,0,0,,在本例子中，你可以在上方看到 /slash/v1/public/characters
Dialogue: 0,0:03:14.54,0:03:22.40,Default,,0,0,0,,并附上了地址前缀 gateway.marvel.com:80/v1
Dialogue: 0,0:03:22.40,0:03:30.14,Default,,0,0,0,,最后，你可以看到传入的各类键值对的查询参数：
Dialogue: 0,0:03:30.14,0:03:34.24,Default,,0,0,0,,NameStarts 等于Sp，limits 等于10
Dialogue: 0,0:03:34.24,0:03:39.22,Default,,0,0,0,,最终你需要提供接口密钥，我们将稍后讨论本内容。
Dialogue: 0,0:03:39.22,0:03:42.08,Default,,0,0,0,,然后我们得到了这个冗长的JSON。
Dialogue: 0,0:03:42.08,0:03:53.74,Default,,0,0,0,,我们可以在最上方看到一些其他信息，表明这个操作成功了，它给了我们一个为200的返回值。
Dialogue: 0,0:03:53.74,0:04:00.98,Default,,0,0,0,,如果操作失败了，我们也可以看到一些可能导致失败的原因。
Dialogue: 0,0:04:00.98,0:04:11.32,Default,,0,0,0,,便于网页应用使用的，以HTML表示的attributionText已被添加
Dialogue: 0,0:04:11.32,0:04:16.32,Default,,0,0,0,,我需要再次强调，根据你和漫威动画间的约定，你需要理解这些跟法律相关的内容
Dialogue: 0,0:04:16.32,0:04:20.06,Default,,0,0,0,,但无论如何，我们得到了实际需要的结果
Dialogue: 0,0:04:20.06,0:04:30.08,Default,,0,0,0,,在本例中，接口报告总共有33个角色符合查询要求，但是根据设定只返回了前10个角色。
Dialogue: 0,0:04:30.08,0:04:34.42,Default,,0,0,0,,我们只返回了前十个名字以SP开头的角色。
Dialogue: 0,0:04:34.42,0:04:43.60,Default,,0,0,0,,你可以看到第一个角色， Spacker Dave ，并没有描述，也没有预览图像。
Dialogue: 0,0:04:43.60,0:04:50.78,Default,,0,0,0,,在一些情况下，不是特别出名的角色不会有很多信息。
Dialogue: 0,0:04:50.78,0:04:55.04,Default,,0,0,0,,与之相反，有些角色会有特别多的信息。
Dialogue: 0,0:04:55.04,0:04:57.36,Default,,0,0,0,,我们继续看一下……
Dialogue: 0,0:04:57.36,0:04:59.24,Default,,0,0,0,,第二个角色Speed是个很好的例子。
Dialogue: 0,0:04:59.24,0:05:03.66,Default,,0,0,0,,描述: Tommy Shephard might be the son of Scarlet Witch and The Vision. 嗯。
Dialogue: 0,0:05:03.66,0:05:09.68,Default,,0,0,0,,这个角色也有预览图。属性 resourceURI 给了我们更多关于角色的具体信息
Dialogue: 0,0:05:09.68,0:05:13.80,Default,,0,0,0,,接下来是这个角色在不同漫画中的出现次数
Dialogue: 0,0:05:13.80,0:05:21.20,Default,,0,0,0,,在本例子中我们可以看到本角色在两个独立的漫画中出现。
Dialogue: 0,0:05:21.20,0:05:25.34,Default,,0,0,0,,然后是他们在连载中出现的次数，以及涉及他们的故事。
Dialogue: 0,0:05:25.34,0:05:31.41,Default,,0,0,0,,接下来是其他角色，例如 Speed Demon 。
Dialogue: 0,0:05:31.41,0:05:37.22,Default,,0,0,0,,我们来讨论一下应用程序接口密钥。
Dialogue: 0,0:05:37.22,0:05:44.84,Default,,0,0,0,,当你注册开发者账户时，你可以在最顶端查看你的开发者账户。
Dialogue: 0,0:05:44.84,0:05:48.50,Default,,0,0,0,,你将获得一个公钥和一个私钥。
Dialogue: 0,0:05:48.50,0:05:59.60,Default,,0,0,0,,在调用API时，多数情况下你将被要求仅传入公钥，就像你之前看到的那样；
Dialogue: 0,0:05:59.60,0:06:05.36,Default,,0,0,0,,但是少数情况下你需要传入公钥和私钥的组合，我们将在稍后讨论。
Dialogue: 0,0:06:05.36,0:06:16.48,Default,,0,0,0,,如果你是在网页端应用程序里使用这些接口，你需要指定你的应用程序接口调用来源。
Dialogue: 0,0:06:16.48,0:06:27.92,Default,,0,0,0,,在本例中，用于获得信息的地址是 developer.marvel.com 。
Dialogue: 0,0:06:27.92,0:06:34.15,Default,,0,0,0,,但是，如果你查看 How-To 章节下的授权流程
Dialogue: 0,0:06:34.15,0:06:39.41,Default,,0,0,0,,你将会发现这只适用于基于浏览器构建的客户端应用程序（而不是基于非浏览器构建的应用端客户程序）。
Dialogue: 0,0:06:39.41,0:06:44.41,Default,,0,0,0,,如果你在构建的是一个服务器端应用程序
Dialogue: 0,0:06:44.41,0:06:47.45,Default,,0,0,0,,在我们的例子里，也就仅仅是一个客户端
Dialogue: 0,0:06:47.45,0:06:49.89,Default,,0,0,0,,你需要提供更多的信息。
Dialogue: 0,0:06:49.89,0:06:53.57,Default,,0,0,0,,事实上，你需要提供的是哈希值。
Dialogue: 0,0:06:53.57,0:07:01.29,Default,,0,0,0,,在这里，哈希值是你的公私钥和请求时间戳的 MD5 摘要值。
Dialogue: 0,0:07:01.29,0:07:11.18,Default,,0,0,0,,这里的哈希事实上就是一种基于只有双方知道的公私钥对的计算算法。
Dialogue: 0,0:07:11.18,0:07:22.38,Default,,0,0,0,,事实上有很多哈希算法，MD5是其中比较弱的一个。
Dialogue: 0,0:07:22.38,0:07:30.24,Default,,0,0,0,,但是更强的算法也意味着消耗更多计算资源。因此，在这里他们做了一个权衡。
Dialogue: 0,0:07:30.24,0:07:40.04,Default,,0,0,0,,但最终的目的还是确保没有人盗用了你和服务器之间的请求。
Dialogue: 0,0:07:40.08,0:07:46.57,Default,,0,0,0,,你需要做的是拿上你的公钥、私钥和时间戳
Dialogue: 0,0:07:46.57,0:07:52.26,Default,,0,0,0,,然后你把这些值放到 md5 这个算法中
Dialogue: 0,0:07:52.31,0:07:58.64,Default,,0,0,0,,最后你会得到一个哈希值。\N每次我们调用漫威 API 的时候我们都会在后面加上这个哈希值。
Dialogue: 0,0:07:58.64,0:08:00.42,Default,,0,0,0,,我们刚刚了解如何在 C# 里完成这一切操作。
Dialogue: 0,0:08:00.42,0:08:08.41,Default,,0,0,0,,幸运的是，在 Universal Windows Platform 里的一些类将帮助我们完成这些操作。
Dialogue: 0,0:08:08.41,0:08:19.24,Default,,0,0,0,,让我们回到交互式文档，讨论一下接下来我们的应用程序会做什么。
Dialogue: 0,0:08:19.24,0:08:25.44,Default,,0,0,0,,我们将会创建一个叫 Hero Explorer 的应用程序。
Dialogue: 0,0:08:25.44,0:08:31.65,Default,,0,0,0,,这个应用程序将从 Marvel Universe 里随机显示一些角色
Dialogue: 0,0:08:31.65,0:08:34.51,Default,,0,0,0,,我们可以点击其中的某一个角色来了解关于该角色的更多信息。
Dialogue: 0,0:08:34.51,0:08:40.37,Default,,0,0,0,,举个例子，很久以前我不知道某个叫 Speed的角色，以前他干了什么……
Dialogue: 0,0:08:40.37,0:08:49.05,Default,,0,0,0,,就像我们这群 Geek 一样,，如果在人生中的某一点你对漫威动画产生了兴趣（想了解更多），这是不是很有意思？
Dialogue: 0,0:08:49.05,0:08:57.69,Default,,0,0,0,,所以我想做的大概就是随机从漫威动画数据库里取十个角色。
Dialogue: 0,0:08:57.69,0:09:01.75,Default,,0,0,0,,接下来我要做的是创建一个偏差值
Dialogue: 0,0:09:01.75,0:09:07.25,Default,,0,0,0,,我知道数据库中个大概有 1,500 个角色。
Dialogue: 0,0:09:07.25,0:09:15.63,Default,,0,0,0,,我将随机生成一个 1-1500 间的数字，比如 1490 ，称之为我的差值。
Dialogue: 0,0:09:15.63,0:09:20.37,Default,,0,0,0,,以随机数字 520 为例，
Dialogue: 0,0:09:20.37,0:09:29.09,Default,,0,0,0,,从 520 后在漫威的数据库中获得十个角色。
Dialogue: 0,0:09:29.09,0:09:32.23,Default,,0,0,0,,因此我输入限制(Limit): 10，偏差值(Offset): 520
Dialogue: 0,0:09:32.23,0:09:35.49,Default,,0,0,0,,让我们看看获得到什么。
Dialogue: 0,0:09:35.49,0:09:43.97,Default,,0,0,0,,返回的结果以首字母正序排序。呀，返回了一个为 500 的状态码
Dialogue: 0,0:09:43.97,0:09:51.91,Default,,0,0,0,,这表明在他们那里出现了一些问题。你可以重试，或是修改一些这里的请求
Dialogue: 0,0:09:51.91,0:09:55.31,Default,,0,0,0,,我们把数值改成 350 并再试一次。
Dialogue: 0,0:09:56.41,0:09:59.05,Default,,0,0,0,,嗯，这次看上去可以了。
Dialogue: 0,0:09:59.05,0:10:01.37,Default,,0,0,0,,我并不确定发生了什么
Dialogue: 0,0:10:01.37,0:10:05.01,Default,,0,0,0,,但是你通过某种办法使其工作了，对吧？
Dialogue: 0,0:10:05.01,0:10:08.03,Default,,0,0,0,,在这个例子中，我们从字母 E 开始，
Dialogue: 0,0:10:08.03,0:10:12.01,Default,,0,0,0,,我们看看 Earthquake ，我从来不知道这个角色
Dialogue: 0,0:10:12.01,0:10:20.67,Default,,0,0,0,,接下来跟着的是 Echo
Dialogue: 0,0:10:22.71,0:10:26.20,Default,,0,0,0,,然后是 Eddie Brock 。我们可以不管它们了。
Dialogue: 0,0:10:26.21,0:10:33.17,Default,,0,0,0,,现在我们对如何调用 API 有所了解了
Dialogue: 0,0:10:33.17,0:10:41.82,Default,,0,0,0,,接下来我们要做的是把返回的 JSON 转换到 C# 类。
Dialogue: 0,0:10:41.82,0:10:46.20,Default,,0,0,0,,就像在我们做天气应用时调用 OpenWeatherMap API 那样。
Dialogue: 0,0:10:46.20,0:10:57.58,Default,,0,0,0,,所以我需要做的是，寻找一个可以用于转换 JSON 到 C# 类的 JSON 样例。
Dialogue: 0,0:10:57.59,0:11:04.49,Default,,0,0,0,,如果我用了一个没有太多返回结果的 JSON
Dialogue: 0,0:11:04.49,0:11:09.51,Default,,0,0,0,,那我们就不一定能获得准确的转换到从 JSON 转换到 C# 的类。
Dialogue: 0,0:11:09.51,0:11:13.84,Default,,0,0,0,,我要做的是就是输入大概是：
Dialogue: 0,0:11:13.85,0:11:17.88,Default,,0,0,0,,Spider ，不对， Spiderman 。
Dialogue: 0,0:11:17.89,0:11:21.08,Default,,0,0,0,,它返回了两个结果给我。
Dialogue: 0,0:11:21.08,0:11:25.34,Default,,0,0,0,,我就得到了我需要的东西。
Dialogue: 0,0:11:25.34,0:11:31.74,Default,,0,0,0,,它给了我一个良好的 JSON 范例来帮助我转换 JSON 到 C# 。
Dialogue: 0,0:11:31.74,0:11:35.90,Default,,0,0,0,,接下来我们去掉偏差值再试一次。
Dialogue: 0,0:11:35.90,0:11:39.51,Default,,0,0,0,,嗯，我得到了名字，很好的描述
Dialogue: 0,0:11:39.51,0:11:41.31,Default,,0,0,0,,以及极好的预览图。
Dialogue: 0,0:11:41.31,0:11:52.17,Default,,0,0,0,,这里所有枚举出来的信息，我对这个代码片段返回的所有信息感到满意。
Dialogue: 0,0:11:52.17,0:11:55.87,Default,,0,0,0,,选中它们，按 Ctrl + C 复制到我的剪贴板里
Dialogue: 0,0:11:55.87,0:12:00.70,Default,,0,0,0,,并前往 json2csharp.com 复制我的 JSON
Dialogue: 0,0:12:00.70,0:12:03.36,Default,,0,0,0,,并点击“生成” (Generate)。
Dialogue: 0,0:12:03.36,0:12:12.52,Default,,0,0,0,,我想强调一下为什么我需要得到一个有很多数据的角色 JSON 数据模板
Dialogue: 0,0:12:12.52,0:12:17.48,Default,,0,0,0,,因为在 json2csharp.com 处理JSON时
Dialogue: 0,0:12:17.48,0:12:21.80,Default,,0,0,0,,它将解析 JSON 并分析需要创建哪些类。
Dialogue: 0,0:12:21.80,0:12:29.86,Default,,0,0,0,,如果缺失一些信息，它将使用一些通用的东西，比如 object ，而不是 character 。
Dialogue: 0,0:12:29.86,0:12:37.40,Default,,0,0,0,,它也有可能会生成在我们的 JSON 模板里不存在的内容
Dialogue: 0,0:12:37.40,0:12:39.26,Default,,0,0,0,,希望你理解了我说的内容。
Dialogue: 0,0:12:39.26,0:12:42.20,Default,,0,0,0,,我将把这些内容复制到剪贴板
Dialogue: 0,0:12:42.20,0:12:45.28,Default,,0,0,0,,打开 Visual Studio
Dialogue: 0,0:12:45.28,0:12:52.06,Default,,0,0,0,,创建一个叫 HeroExplorer 的项目。
Dialogue: 0,0:13:02.17,0:13:12.74,Default,,0,0,0,,然后我要做的第一件事情是创建一个叫 Model 的文件夹
Dialogue: 0,0:13:12.74,0:13:19.31,Default,,0,0,0,,在这个文件夹中，我将创建一个类，名叫……
Dialogue: 0,0:13:19.31,0:13:20.77,Default,,0,0,0,,好吧，我要做的是
Dialogue: 0,0:13:20.77,0:13:24.87,Default,,0,0,0,,返回漫威开发者门户
Dialogue: 0,0:13:24.87,0:13:26.37,Default,,0,0,0,,回到最上方
Dialogue: 0,0:13:26.37,0:13:29.07,Default,,0,0,0,,我们可以看到回复的类。
Dialogue: 0,0:13:29.07,0:13:31.97,Default,,0,0,0,,在最顶端，我们可以看到一个叫
Dialogue: 0,0:13:31.97,0:13:36.69,Default,,0,0,0,,CharacterDataWrapper 和 CharacterDataContainer 的类。
Dialogue: 0,0:13:36.69,0:13:40.65,Default,,0,0,0,,CharacterDataWrapper将会包含数据
Dialogue: 0,0:13:40.65,0:13:44.01,Default,,0,0,0,,CharacterDataContainer将会包含结果。
Dialogue: 0,0:13:44.01,0:13:46.95,Default,,0,0,0,,也就是一个 Character 类的数组。
Dialogue: 0,0:13:46.95,0:13:50.95,Default,,0,0,0,,所以我就叫它 CharacterDataWrapper 吧。
Dialogue: 0,0:13:57.22,0:14:06.36,Default,,0,0,0,,我将把从 json2csharp 得到的所有内容复制到这里。
Dialogue: 0,0:14:06.36,0:14:12.28,Default,,0,0,0,,我将深入检查这里的内容
Dialogue: 0,0:14:12.28,0:14:16.34,Default,,0,0,0,,比如这里有东西命名太通用化： 比如 "item"。
Dialogue: 0,0:14:16.34,0:14:22.58,Default,,0,0,0,,事实上 "item" 是 Comics 类的一个实例，
Dialogue: 0,0:14:22.58,0:14:31.36,Default,,0,0,0,,所以我现在要做的是把这个内容从 Item 重命名到 Comic ，
Dialogue: 0,0:14:31.36,0:14:35.54,Default,,0,0,0,,所以 Comics 类将会包含一个类型为 Comic 的列表内容。
Dialogue: 0,0:14:35.54,0:14:37.22,Default,,0,0,0,,对 Series 类，上述内容也适用。
Dialogue: 0,0:14:37.22,0:14:43.25,Default,,0,0,0,,不幸的是，对 Series 此词取复数形式太过麻烦。
Dialogue: 0,0:14:43.25,0:14:49.36,Default,,0,0,0,,所以我可能叫它 SeriesList 。
Dialogue: 0,0:14:49.36,0:14:59.86,Default,,0,0,0,,因此就将其命名为 Series，然后 SeriesList 就会有一个 Series 的列表。
Dialogue: 0,0:14:59.86,0:15:02.42,Default,,0,0,0,,上述事情也对 Stories 一样适用。
Dialogue: 0,0:15:02.42,0:15:05.34,Default,,0,0,0,,所以这个将会成为 Story 类
Dialogue: 0,0:15:05.34,0:15:13.08,Default,,0,0,0,,然后，在我们的 Stories 类里面，就会有一个 Story 类的列表叫 Items 。
Dialogue: 0,0:15:13.08,0:15:15.74,Default,,0,0,0,,我们对 Events 类采取相同的操作。
Dialogue: 0,0:15:15.74,0:15:18.36,Default,,0,0,0,,所以我们会将这个命名为 Event
Dialogue: 0,0:15:18.36,0:15:23.17,Default,,0,0,0,,然后我们就会有一个 Events 类的列表叫 Items 。
Dialogue: 0,0:15:24.55,0:15:28.35,Default,,0,0,0,,但是到我们看到最下面的这些内容后
Dialogue: 0,0:15:28.35,0:15:34.29,Default,,0,0,0,,我目前真正想做的是重用漫威使用的命名。
Dialogue: 0,0:15:34.29,0:15:42.13,Default,,0,0,0,,所以，我们将称呼这个最顶端的对象 CharacterDataWrapper 而不是 rootObject 。
Dialogue: 0,0:15:42.13,0:15:50.47,Default,,0,0,0,,与之同时，我们在这里将会使用 CharacterDataContainer 这个名字。
Dialogue: 0,0:15:53.32,0:16:00.80,Default,,0,0,0,,除此之外，我还看到每个独立角色是 Character类型的
Dialogue: 0,0:16:00.80,0:16:02.24,Default,,0,0,0,,所以我也将改变这些内容
Dialogue: 0,0:16:02.24,0:16:05.78,Default,,0,0,0,,所以这不是 result ，而是 Character 。
Dialogue: 0,0:16:05.78,0:16:09.22,Default,,0,0,0,,所以我们也会有一个 Character 的列表。
Dialogue: 0,0:16:09.22,0:16:16.32,Default,,0,0,0,,它将给返回给我们 CharacterDataContainer 的数据。
Dialogue: 0,0:16:16.32,0:16:19.60,Default,,0,0,0,,接下来我希望深入检查，以确保各项内容正确。
Dialogue: 0,0:16:19.60,0:16:24.81,Default,,0,0,0,,所以这个应该是 SeriesList 而不是 Series 。
Dialogue: 0,0:16:24.81,0:16:29.30,Default,,0,0,0,,然后我需要花一点时间检查这里的内容
Dialogue: 0,0:16:29.30,0:16:31.09,Default,,0,0,0,,我需要在此处特别小心
Dialogue: 0,0:16:31.09,0:16:38.33,Default,,0,0,0,,因为我需要确保 JSON 在反序列化后这些类是可用的。
Dialogue: 0,0:16:38.33,0:16:42.83,Default,,0,0,0,,(笑) 诊断不能工作的原因是很麻烦的。
Dialogue: 0,0:16:42.83,0:16:45.83,Default,,0,0,0,,嗯，看上去没啥问题……
Dialogue: 0,0:16:45.83,0:16:49.61,Default,,0,0,0,,嗯，我觉得在什么我们要做的下一件事情
Dialogue: 0,0:16:49.61,0:16:51.67,Default,,0,0,0,,嗯……停一下！
Dialogue: 0,0:16:51.67,0:16:56.25,Default,,0,0,0,,我们事实上要创建一个类。
Dialogue: 0,0:16:56.25,0:16:59.32,Default,,0,0,0,,所以在这里，让我把这个设定到最顶端……
Dialogue: 0,0:16:59.32,0:17:02.66,Default,,0,0,0,,然后添加一个类
Dialogue: 0,0:17:02.66,0:17:05.44,Default,,0,0,0,,我需要一种编程访问漫威动画 API 的方法
Dialogue: 0,0:17:05.44,0:17:12.88,Default,,0,0,0,,所以我将在这里创建 MarvelFacade
Dialogue: 0,0:17:12.88,0:17:18.34,Default,,0,0,0,,Facade 是软件开发中的专有名词
Dialogue: 0,0:17:18.34,0:17:26.46,Default,,0,0,0,,指代一种创建一层代码以包装你不可控制的内容的的设计模型。
Dialogue: 0,0:17:26.46,0:17:31.88,Default,,0,0,0,,所以我们希望创建一种友好的方法来从 C# 里调用漫威的 API 。
Dialogue: 0,0:17:31.88,0:17:47.74,Default,,0,0,0,,在幕后， MarvelFacade 将会处理调用，获取，解析并转换到我们的模型类的诸类繁杂琐事。
Dialogue: 0,0:17:47.74,0:17:57.80,Default,,0,0,0,,MarvelFacade 也会包含一些私有的方法来帮助创建、构建传到漫威动画的 URL
Dialogue: 0,0:17:57.80,0:18:04.94,Default,,0,0,0,,也不止 API 调用本身，也加上筛选参数，同时也
Dialogue: 0,0:18:04.94,0:18:15.84,Default,,0,0,0,,包含我们传过去的 公钥、私钥和时间戳的 MD5 哈希值。
Dialogue: 0,0:18:15.84,0:18:22.70,Default,,0,0,0,,所以我们把这个改成一个公开的静态类 (public static class) —— 好吧，我们把它只改称公开类 (public class)
Dialogue: 0,0:18:22.70,0:18:34.80,Default,,0,0,0,,然后我们会创建一个公开的静态方法 (public static void) 叫 GetCharacterList 。
Dialogue: 0,0:18:34.80,0:18:44.36,Default,,0,0,0,,我知道我需要用 HTTPClient 来做调用，我将
Dialogue: 0,0:18:44.37,0:18:50.16,Default,,0,0,0,,通过到 “管理NuGet包” (Manage NuGet Packages) 来将其添加到我的包里。
Dialogue: 0,0:18:50.16,0:18:54.02,Default,,0,0,0,,我将会搜索 ——
Dialogue: 0,0:18:54.02,0:18:58.26,Default,,0,0,0,,我会在这里搜索什么呢？是 HTTPClient 。
Dialogue: 0,0:18:58.27,0:19:02.09,Default,,0,0,0,,好， 我们只需要安装它。
Dialogue: 0,0:19:07.14,0:19:11.52,Default,,0,0,0,,好的，就这样
Dialogue: 0,0:19:11.52,0:19:13.72,Default,,0,0,0,,我认为这就是我在这个视频里所想完成的所有内容
Dialogue: 0,0:19:13.73,0:19:19.98,Default,,0,0,0,,因为我希望保持视频短小精炼。
Dialogue: 0,0:19:19.99,0:19:23.72,Default,,0,0,0,,让我们在这里停下吧，在下一个视频中
Dialogue: 0,0:19:23.73,0:19:32.40,Default,,0,0,0,,我们将真正调用漫威动画并得到角色人物的 JSON 文件
Dialogue: 0,0:19:32.40,0:19:36.82,Default,,0,0,0,,并反序列化到 CharacterDataWrapper 模型。
Dialogue: 0,0:19:36.82,0:19:39.33,Default,,0,0,0,,那我们下个视频见。
Dialogue: 0,0:19:39.33,0:19:46.57,Default,,0,0,0,,微软大法好
