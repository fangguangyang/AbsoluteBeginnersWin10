[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: ../uwp76HeroExplorerDisplayingComics_mid.mp4
Video File: ../uwp76HeroExplorerDisplayingComics_mid.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.375000
Scroll Position: 237
Active Line: 239
Video Position: 48878

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,微软雅黑,50,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,50,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:04.50,Default,,0,0,0,,Windows 10 新手开发系列\N探索英雄——显示一个角色的漫画\N翻译：@geelaw　校对：陈继民　压制：（占位符）
Dialogue: 0,0:00:06.30,0:00:10.51,Default,,0,0,0,,这篇视频的目标是让程序显示漫画的列表
Dialogue: 0,0:00:10.51,0:00:14.93,Default,,0,0,0,,比如一次最多显示十个当前选择的角色
Dialogue: 0,0:00:14.93,0:00:19.95,Default,,0,0,0,,角色这个上一个视频已经做过了
Dialogue: 0,0:00:21.38,0:00:24.46,Default,,0,0,0,,好消息是，我们已经有一个做这个的模板
Dialogue: 0,0:00:24.46,0:00:26.62,Default,,0,0,0,,我们只要调用一个不同的 API 即可
Dialogue: 0,0:00:26.62,0:00:28.74,Default,,0,0,0,,我们待会儿就做这件事
Dialogue: 0,0:00:28.74,0:00:32.54,Default,,0,0,0,,不过在这之前，我们先在开发者门户里面看一下这个
Dialogue: 0,0:00:32.54,0:00:36.18,Default,,0,0,0,,我们之前在这个页面里面讨论的是标注来源（attribution）的事情
Dialogue: 0,0:00:36.18,0:00:40.00,Default,,0,0,0,,不过，还有另外一个需要考量的事情
Dialogue: 0,0:00:40.00,0:00:40.77,Default,,0,0,0,,调用频率
Dialogue: 0,0:00:40.77,0:00:45.21,Default,,0,0,0,,注意这里，这里说大部分服务的调用频率限制是
Dialogue: 0,0:00:45.21,0:00:49.68,Default,,0,0,0,,一天至多 1000 次，不过一些服务的频率可能有所不同
Dialogue: 0,0:00:50.87,0:00:53.72,Default,,0,0,0,,如果我们的 app 流行了
Dialogue: 0,0:00:53.72,0:01:03.53,Default,,0,0,0,,那可就有别的麻烦了：它每天最多被打开 1000 次\N（一个顾客开多次算多次）
Dialogue: 0,0:01:03.53,0:01:13.92,Default,,0,0,0,,这还是最乐观的情况：每个请求都成功了\N且获取所有的数据用不着三四个请求
Dialogue: 0,0:01:13.92,0:01:18.01,Default,,0,0,0,,所以，假使这个是一个实际的 app
Dialogue: 0,0:01:18.01,0:01:21.67,Default,,0,0,0,,假设我要大量分发这个 app 到世界的各个角落
Dialogue: 0,0:01:21.67,0:01:26.57,Default,,0,0,0,,我就得重新考虑我该怎么应对这个（调用频率的）问题
Dialogue: 0,0:01:27.60,0:01:32.44,Default,,0,0,0,,有两个方法，其中一个是要求最终用户获取他们自己的 key
Dialogue: 0,0:01:32.44,0:01:36.58,Default,,0,0,0,,不过这个过程会给用户很多阻力（比较困难）
Dialogue: 0,0:01:36.58,0:01:39.77,Default,,0,0,0,,或者我可能会自己创建一个 Web 服务
Dialogue: 0,0:01:39.77,0:01:43.30,Default,,0,0,0,,就像我们在天气 UWP app 里面那样
Dialogue: 0,0:01:44.31,0:01:48.46,Default,,0,0,0,,我们在 app 中调用的是
Dialogue: 0,0:01:48.46,0:01:53.01,Default,,0,0,0,,在 Azure 中（或者随便哪儿）的 Web 服务
Dialogue: 0,0:01:53.01,0:01:57.17,Default,,0,0,0,,然后这个调用会被转到 Marvel（漫威）API，做出相应必要的 API 调用
Dialogue: 0,0:01:57.17,0:02:01.25,Default,,0,0,0,,获取数据并在本地缓存它们
Dialogue: 0,0:02:01.25,0:02:05.57,Default,,0,0,0,,在这个页面上可以看到，实际上是可以缓存结果的
Dialogue: 0,0:02:05.57,0:02:11.75,Default,,0,0,0,,可以在本地缓存一段时间——至多 24 小时
Dialogue: 0,0:02:11.75,0:02:15.20,Default,,0,0,0,,不过，这里他们也说了，数据确实会定期变化
Dialogue: 0,0:02:15.20,0:02:17.79,Default,,0,0,0,,所以你不能简单地把它存到数据库里面
Dialogue: 0,0:02:17.79,0:02:19.67,Default,,0,0,0,,（不能）一直存到天荒地老
Dialogue: 0,0:02:19.67,0:02:25.05,Default,,0,0,0,,如果你这样做，你会打破你和 Marvel（漫威）订立的协议\N以及打破他们 API 的使用方法
Dialogue: 0,0:02:25.05,0:02:30.13,Default,,0,0,0,,并且，我们也不能一股脑儿地把整个数据库扒拉下来
Dialogue: 0,0:02:30.13,0:02:33.07,Default,,0,0,0,,这里说了：只调用你需要调用的
Dialogue: 0,0:02:33.07,0:02:38.27,Default,,0,0,0,,所以，这里按照我的理解是说\N我可以为第一位用户调用这个 API
Dialogue: 0,0:02:38.27,0:02:43.91,Default,,0,0,0,,然后缓存我得到的数据（至多 24 小时）
Dialogue: 0,0:02:43.91,0:02:47.28,Default,,0,0,0,,然后来了第二位用户的时候，假设它请求数据
Dialogue: 0,0:02:47.28,0:02:50.55,Default,,0,0,0,,我可以为他抓取数据并缓存起来
Dialogue: 0,0:02:50.55,0:02:54.92,Default,,0,0,0,,然后是第三个用户请求数据，我可以为她抓取数据
Dialogue: 0,0:02:54.92,0:02:56.79,Default,,0,0,0,,现在我就有三个用户的（缓存）数据了
Dialogue: 0,0:02:56.79,0:03:01.01,Default,,0,0,0,,当我不断调用（API）的时候，某个时间点的时候我会得到一个错误
Dialogue: 0,0:03:01.01,0:03:02.99,Default,,0,0,0,,在哪儿说的来着？
Dialogue: 0,0:03:02.99,0:03:06.57,Default,,0,0,0,,在这儿，会得到返回代码 429
Dialogue: 0,0:03:06.57,0:03:09.57,Default,,0,0,0,,表示调用次数太多
Dialogue: 0,0:03:09.57,0:03:13.11,Default,,0,0,0,,从这时起，我就可以从我的本地缓存提供数据（给用户）
Dialogue: 0,0:03:13.11,0:03:14.33,Default,,0,0,0,,这样说明白了吗？
Dialogue: 0,0:03:14.33,0:03:17.49,Default,,0,0,0,,在这个 app 里面我们不会这么做
Dialogue: 0,0:03:17.50,0:03:19.95,Default,,0,0,0,,但是如果这是一个真的 app 的话
Dialogue: 0,0:03:19.95,0:03:22.49,Default,,0,0,0,,在更高的（产品设计）层面上就要这么做了
Dialogue: 0,0:03:23.94,0:03:29.74,Default,,0,0,0,,现在我们转到交互式文档（Interactive Documentation）上
Dialogue: 0,0:03:29.74,0:03:37.19,Default,,0,0,0,,因为我现在需要找到一个特定角色的漫画列表
Dialogue: 0,0:03:37.19,0:03:42.10,Default,,0,0,0,,我费了点儿工夫浏览了一下各种不同的
Dialogue: 0,0:03:42.10,0:03:46.01,Default,,0,0,0,,我可以调用的 API，看了看如何调用它们
Dialogue: 0,0:03:46.01,0:03:49.45,Default,,0,0,0,,最后我找到了 /public/comics 这个 API
Dialogue: 0,0:03:49.45,0:03:51.39,Default,,0,0,0,,你看看
Dialogue: 0,0:03:51.39,0:03:55.60,Default,,0,0,0,,可以指定一个可选的角色范围参数
Dialogue: 0,0:03:55.60,0:04:00.72,Default,,0,0,0,,这样它就只返回有这个特定角色的漫画了
Dialogue: 0,0:04:00.72,0:04:05.77,Default,,0,0,0,,这个参数接受（角色）ID，多个 ID 用逗号分隔\N不错不错，够用了
Dialogue: 0,0:04:05.77,0:04:11.02,Default,,0,0,0,,演示一下，我来抓取
Dialogue: 0,0:04:11.02,0:04:16.82,Default,,0,0,0,,蜘蛛侠（的漫画），蜘蛛侠的 ID 是 1009610
Dialogue: 0,0:04:16.82,0:04:21.87,Default,,0,0,0,,并且我限制返回的漫画数量至多是 10
Dialogue: 0,0:04:21.87,0:04:25.63,Default,,0,0,0,,好，咱们试试
Dialogue: 0,0:04:25.63,0:04:29.25,Default,,0,0,0,,搞定，看起来我有这样就能弄到我需要的数据了
Dialogue: 0,0:04:29.25,0:04:31.28,Default,,0,0,0,,我看看我能不能（直接从这儿）抓取（这些数据）
Dialogue: 0,0:04:31.28,0:04:34.11,Default,,0,0,0,,我要把这些数据抓取（复制）出来
Dialogue: 0,0:04:34.11,0:04:37.88,Default,,0,0,0,,滚动一路到底
Dialogue: 0,0:04:39.24,0:04:42.73,Default,,0,0,0,,可能得再限制一下这个（返回的漫画数量）
Dialogue: 0,0:04:42.73,0:04:48.41,Default,,0,0,0,,我再来调用一下这个，不过这次只要两个漫画就好
Dialogue: 0,0:04:48.41,0:04:49.37,Default,,0,0,0,,为什么是两个呢？
Dialogue: 0,0:04:49.37,0:04:52.50,Default,,0,0,0,,因为只有一个不太好：我想要显示一个集合
Dialogue: 0,0:04:52.50,0:04:58.93,Default,,0,0,0,,而十个也不太好：十个太多了，不适合传入 JSON2CSharp
Dialogue: 0,0:04:58.93,0:05:02.01,Default,,0,0,0,,好，咱们向上滚动，全部选中
Dialogue: 0,0:05:02.01,0:05:03.18,Default,,0,0,0,,之前我们也做过类似的，是吧？
Dialogue: 0,0:05:03.18,0:05:09.95,Default,,0,0,0,,我们现在对漫画做一次，之前是对角色做的
Dialogue: 0,0:05:09.95,0:05:15.23,Default,,0,0,0,,好的，搞定了，我们复制这一坨
Dialogue: 0,0:05:15.23,0:05:18.40,Default,,0,0,0,,进入 JSON2CSharp，然后
Dialogue: 0,0:05:18.40,0:05:23.81,Default,,0,0,0,,全都粘进来，点 Generate（生成）
Dialogue: 0,0:05:23.81,0:05:29.11,Default,,0,0,0,,然后滚动到底部，复制（生成的代码）
Dialogue: 0,0:05:29.11,0:05:31.34,Default,,0,0,0,,Ctrl+C，复制到剪贴板
Dialogue: 0,0:05:31.34,0:05:36.21,Default,,0,0,0,,现在我要转到解决方案浏览器（Solution Explorer）\N里面的 Models 文件夹
Dialogue: 0,0:05:36.21,0:05:40.02,Default,,0,0,0,,然后点“工程”菜单（Project）\N然后选择“添加类...”（Add Class...）
Dialogue: 0,0:05:40.02,0:05:43.55,Default,,0,0,0,,给这个类起名为 ComicDataWrapper（漫画数据包装器）
Dialogue: 0,0:05:43.55,0:05:48.42,Default,,0,0,0,,他们（Marvel，漫威）那边就是这么叫的
Dialogue: 0,0:05:48.42,0:05:49.55,Default,,0,0,0,,我想和他们保持术语一致性
Dialogue: 0,0:05:50.64,0:05:56.20,Default,,0,0,0,,然后我选中 ComicDataWrapper 类存根（自动生成的类代码）
Dialogue: 0,0:05:56.20,0:06:01.84,Default,,0,0,0,,按 Ctrl+V 来粘贴我们的数据（生成的代码）
Dialogue: 0,0:06:01.84,0:06:06.89,Default,,0,0,0,,然后把这个（RootObject 类）重命名为 ComicDataWrapper
Dialogue: 0,0:06:06.89,0:06:10.70,Default,,0,0,0,,现在，注意到当我们向上滚动的时候
Dialogue: 0,0:06:10.70,0:06:16.29,Default,,0,0,0,,我们会看到一些项上有红色波浪线
Dialogue: 0,0:06:16.29,0:06:21.06,Default,,0,0,0,,这个的原因是在同一个命名空间里已经有一个叫做 Events 的类
Dialogue: 0,0:06:21.06,0:06:24.92,Default,,0,0,0,,可以选择创建一个新的命名空间并把它放进去
Dialogue: 0,0:06:24.92,0:06:27.72,Default,,0,0,0,,这个（类）就不在 HeroExplorer.Models（命名空间）里面了
Dialogue: 0,0:06:27.72,0:06:31.85,Default,,0,0,0,,而是 HeroExplorer.Models.叽里呱啦，比如 Comic？
Dialogue: 0,0:06:31.85,0:06:35.42,Default,,0,0,0,,另一个选择是，把它们删除
Dialogue: 0,0:06:35.42,0:06:38.33,Default,,0,0,0,,直接用另一个定义（先前的 Events 类等）
Dialogue: 0,0:06:45.09,0:06:51.35,Default,,0,0,0,,我们这个情况里，直接用另外的定义是可以的
Dialogue: 0,0:06:51.35,0:06:57.45,Default,,0,0,0,,我在这里就选择这样做
Dialogue: 0,0:06:57.45,0:07:01.52,Default,,0,0,0,,另外，我还会删除这个 Item3 类，你可以看到
Dialogue: 0,0:07:01.52,0:07:03.82,Default,,0,0,0,,Stories 类包含一个 List<Item3> 并且
Dialogue: 0,0:07:03.82,0:07:06.83,Default,,0,0,0,,这些项每个代表一个故事
Dialogue: 0,0:07:06.83,0:07:10.63,Default,,0,0,0,,我会删除掉它，之前说过了
Dialogue: 0,0:07:10.63,0:07:12.91,Default,,0,0,0,,然后删除 Events 类
Dialogue: 0,0:07:12.91,0:07:17.99,Default,,0,0,0,,这个情况下，ComicDataWrapper 类将会具有
Dialogue: 0,0:07:17.99,0:07:23.92,Default,,0,0,0,,一个指向 Data 的引用，它是一个漫画数据的容器
Dialogue: 0,0:07:23.92,0:07:26.95,Default,,0,0,0,,它包含结果的列表
Dialogue: 0,0:07:26.95,0:07:31.21,Default,,0,0,0,,这些结果对象代表了漫画，对吧？
Dialogue: 0,0:07:31.21,0:07:36.00,Default,,0,0,0,,好，我现在来修改这个
Dialogue: 0,0:07:36.00,0:07:40.55,Default,,0,0,0,,改完这个改这个……
Dialogue: 0,0:07:40.55,0:07:46.10,Default,,0,0,0,,改成 ComicDataContainer（漫画数据容器）\N这里也改成这样
Dialogue: 0,0:07:47.65,0:07:50.24,Default,,0,0,0,,搞定，现在我们的类之间的结构就对了
Dialogue: 0,0:07:51.92,0:07:58.56,Default,,0,0,0,,接下来我要进到我们的这个 Facade（MarvelFacade.cs） 里面
Dialogue: 0,0:07:58.56,0:08:06.86,Default,,0,0,0,,我要创建一个和这个 GetCharacterDataWrapperAsync 几乎一样的方法
Dialogue: 0,0:08:06.86,0:08:09.57,Default,,0,0,0,,只要对漫画做相同的事情即可
Dialogue: 0,0:08:09.57,0:08:12.93,Default,,0,0,0,,于是，我打算复制这一段代码
Dialogue: 0,0:08:15.62,0:08:19.33,Default,,0,0,0,,复制整个方法的代码，复制粘贴
Dialogue: 0,0:08:20.55,0:08:23.08,Default,,0,0,0,,现在，很多这里的东西都是可重复（重用）的
Dialogue: 0,0:08:23.08,0:08:25.58,Default,,0,0,0,,我将把这些（可重用部分）找到
Dialogue: 0,0:08:25.58,0:08:28.45,Default,,0,0,0,,提取我需要的公共代码
Dialogue: 0,0:08:28.45,0:08:33.35,Default,,0,0,0,,然后把它们放进一个助手方法里面
Dialogue: 0,0:08:33.35,0:08:36.21,Default,,0,0,0,,那么，先来找到我需要的（公共代码）吧
Dialogue: 0,0:08:36.21,0:08:41.68,Default,,0,0,0,,咱们回到这个调用
Dialogue: 0,0:08:41.68,0:08:46.54,Default,,0,0,0,,这个则是请求的 URL，所以……
Dialogue: 0,0:08:46.54,0:08:52.42,Default,,0,0,0,,把这里这坨复制出来
Dialogue: 0,0:08:52.42,0:08:58.50,Default,,0,0,0,,并在这里用作（调用的）URL
Dialogue: 0,0:08:58.50,0:09:03.92,Default,,0,0,0,,把我用不着的东西都替换掉
Dialogue: 0,0:09:06.86,0:09:11.53,Default,,0,0,0,,（替换部分直到）API key，好滴~
Dialogue: 0,0:09:11.53,0:09:16.07,Default,,0,0,0,,咱们在这儿把 API key 弄掉\N（意为替换为 string.Format 方法的参数占位符）
Dialogue: 0,0:09:20.05,0:09:22.49,Default,,0,0,0,,我不知道这里该填什么，一会儿再来搞编号\N（指 string.Format 方法中占位符指定的参数下标）
Dialogue: 0,0:09:22.49,0:09:24.85,Default,,0,0,0,,这里数目限制为 10
Dialogue: 0,0:09:24.85,0:09:27.79,Default,,0,0,0,,现在先把这里（10）写死
Dialogue: 0,0:09:27.79,0:09:32.89,Default,,0,0,0,,还有，我们要传入角色
Dialogue: 0,0:09:32.89,0:09:35.77,Default,,0,0,0,,应该就是这样了，现在传入角色
Dialogue: 0,0:09:35.77,0:09:38.71,Default,,0,0,0,,这是我们要替换的第一个东西\N（指 string.Format 方法中的第一个对象参数）
Dialogue: 0,0:09:38.71,0:09:41.51,Default,,0,0,0,,API key 是第二个（用于替换字符串的对象参数）
Dialogue: 0,0:09:41.51,0:09:44.52,Default,,0,0,0,,第三个是时间戳
Dialogue: 0,0:09:44.52,0:09:47.18,Default,,0,0,0,,第四个是 hash 值
Dialogue: 0,0:09:47.18,0:09:50.81,Default,,0,0,0,,所以这里我们只要替换（offset 为）characters 参数即可\N（这里的“替换”是指修改 string.Format 的变参列表）
Dialogue: 0,0:09:50.81,0:09:53.19,Default,,0,0,0,,这里改成 characters……
Dialogue: 0,0:09:53.19,0:09:57.45,Default,,0,0,0,,这应该是传入这个方法的角色
Dialogue: 0,0:09:57.45,0:10:04.90,Default,,0,0,0,,所以我们在调用这个 GetComicDataWrapperAsync 的时候
Dialogue: 0,0:10:04.90,0:10:10.53,Default,,0,0,0,,需要传入一个 int 型的参数 characterId（角色标识符）
Dialogue: 0,0:10:10.53,0:10:17.51,Default,,0,0,0,,我看看啊，这两个方法差不多是一样的
Dialogue: 0,0:10:17.51,0:10:22.45,Default,,0,0,0,,在我们反序列化 jsonMessage（JSON 串）之前都差不多
Dialogue: 0,0:10:22.45,0:10:25.24,Default,,0,0,0,,所以我在这个最后的地方之前
Dialogue: 0,0:10:25.24,0:10:28.79,Default,,0,0,0,,之前的这一坨代码都可以放进一个助手方法
Dialogue: 0,0:10:28.79,0:10:32.25,Default,,0,0,0,,来写 private static string……
Dialogue: 0,0:10:32.25,0:10:36.62,Default,,0,0,0,,（讲述这个方法的作用）这个方法会返回 jsonMessage
Dialogue: 0,0:10:36.62,0:10:41.28,Default,,0,0,0,,这个方法就叫 CallMarvel 好了
Dialogue: 0,0:10:41.28,0:10:44.46,Default,,0,0,0,,粘贴这坨
Dialogue: 0,0:10:44.46,0:10:49.43,Default,,0,0,0,,现在来看一下，需要传入的是……
Dialogue: 0,0:10:51.53,0:10:56.63,Default,,0,0,0,,差不多是 API key 之前的内容
Dialogue: 0,0:10:57.75,0:11:01.55,Default,,0,0,0,,所以如果我们把（选中这段）都传进来
Dialogue: 0,0:11:08.99,0:11:15.47,Default,,0,0,0,,把这个参数命名为 url 好了
Dialogue: 0,0:11:15.47,0:11:21.00,Default,,0,0,0,,然后我可以调用 CallMarvel，就在这里写
Dialogue: 0,0:11:30.79,0:11:36.77,Default,,0,0,0,,就像这样，这里先这么些
Dialogue: 0,0:11:36.77,0:11:38.12,Default,,0,0,0,,我们马上就会回来修改这个
Dialogue: 0,0:11:39.15,0:11:42.05,Default,,0,0,0,,先看看出了什么问题\N（指 IntelliSense 提示的红色波浪线）
Dialogue: 0,0:11:42.05,0:11:44.11,Default,,0,0,0,,咱们得返回（return）一个什么东西
Dialogue: 0,0:11:44.11,0:11:45.46,Default,,0,0,0,,我们就 return jsonMessage
Dialogue: 0,0:11:50.40,0:11:53.15,Default,,0,0,0,,就是这个
Dialogue: 0,0:12:02.66,0:12:03.96,Default,,0,0,0,,还要把这个用 async 修饰
Dialogue: 0,0:12:07.98,0:12:10.87,Default,,0,0,0,,所以（按照命名规范 ）我还要在方法名末尾加上 Async
Dialogue: 0,0:12:10.87,0:12:19.04,Default,,0,0,0,,嗯，这里这个 url 好像也有问题
Dialogue: 0,0:12:19.04,0:12:24.34,Default,,0,0,0,,咱们把这个（保存 string.Format 返回结果的变量）\N改名为 completeUrl
Dialogue: 0,0:12:24.34,0:12:29.48,Default,,0,0,0,,在这里（GetAync）调用的时候参数也改成 completeUrl
Dialogue: 0,0:12:29.48,0:12:32.40,Default,,0,0,0,,还有这里，我们传入的显然不是 characterId
Dialogue: 0,0:12:32.40,0:12:35.44,Default,,0,0,0,,我们传入的是 URL（的前半段）
Dialogue: 0,0:12:35.44,0:12:42.46,Default,,0,0,0,,搞定，现在还有问题吗？\N还有
Dialogue: 0,0:12:42.46,0:12:47.11,Default,,0,0,0,,这里要返回 Task<string>
Dialogue: 0,0:12:50.61,0:12:56.89,Default,,0,0,0,,完美！现在应该可以用了
Dialogue: 0,0:12:56.89,0:13:02.35,Default,,0,0,0,,这个方法已经改叫 CallMarvelAsync 啦
Dialogue: 0,0:13:02.35,0:13:07.01,Default,,0,0,0,,它会给我们返回 jsonMessage
Dialogue: 0,0:13:07.01,0:13:10.61,Default,,0,0,0,,所以写 var jsonMessage = await……
Dialogue: 0,0:13:10.61,0:13:15.82,Default,,0,0,0,,然后我们要合成出那个 URL
Dialogue: 0,0:13:15.82,0:13:17.55,Default,,0,0,0,,那就合成出来吧
Dialogue: 0,0:13:25.15,0:13:27.41,Default,,0,0,0,,我们一会儿就回来做这个
Dialogue: 0,0:13:27.41,0:13:30.46,Default,,0,0,0,,好，现在我可以不用这个玩意儿了
Dialogue: 0,0:13:35.53,0:13:40.08,Default,,0,0,0,,不用这个 characterId
Dialogue: 0,0:13:46.84,0:13:48.62,Default,,0,0,0,,还有不用这一坨那一坨……
Dialogue: 0,0:13:55.86,0:13:58.56,Default,,0,0,0,,现在我们要……
Dialogue: 0,0:13:58.56,0:14:04.52,Default,,0,0,0,,要这样传入一个 URL
Dialogue: 0,0:14:04.52,0:14:08.14,Default,,0,0,0,,这样应该就好了
Dialogue: 0,0:14:12.05,0:14:14.71,Default,,0,0,0,,然后在这边，同样的事情
Dialogue: 0,0:14:14.71,0:14:17.43,Default,,0,0,0,,我们保留这个 URL（方便待会儿用）\N然后这些可以全都扫光光了
Dialogue: 0,0:14:20.84,0:14:23.05,Default,,0,0,0,,这些也都不用了
Dialogue: 0,0:14:34.12,0:14:43.27,Default,,0,0,0,,好，现在我们来到这里
Dialogue: 0,0:14:43.27,0:14:46.68,Default,,0,0,0,,这里除了 offset 之外的全都删掉
Dialogue: 0,0:14:56.17,0:14:59.23,Default,,0,0,0,,啊哦~不小心把 offset 也删掉了
Dialogue: 0,0:14:59.23,0:15:04.19,Default,,0,0,0,,弄回来，它就在这儿
Dialogue: 0,0:15:06.03,0:15:10.91,Default,,0,0,0,,int MaxCharacters，对，是一个整型，其实是常数
Dialogue: 0,0:15:10.91,0:15:16.25,Default,,0,0,0,,现在来调用这个方法
Dialogue: 0,0:15:22.41,0:15:24.28,Default,,0,0,0,,OK
Dialogue: 0,0:15:24.28,0:15:26.54,Default,,0,0,0,,啊，我发现这里有好多重构
Dialogue: 0,0:15:26.54,0:15:34.42,Default,,0,0,0,,不过这并不是什么坏事儿\N现在所有调用 Marvel（漫威）API 的代码都在一个地儿了
Dialogue: 0,0:15:35.83,0:15:37.99,Default,,0,0,0,,这里可以不用
Dialogue: 0,0:15:37.99,0:15:40.34,Default,,0,0,0,,它只对一种情况有用
Dialogue: 0,0:15:43.12,0:15:43.72,Default,,0,0,0,,应该好了
Dialogue: 0,0:15:43.72,0:15:48.76,Default,,0,0,0,,下一件要做事的是（清理错误）
Dialogue: 0,0:15:48.76,0:15:51.63,Default,,0,0,0,,我们复制粘贴了好多代码
Dialogue: 0,0:15:51.63,0:15:57.90,Default,,0,0,0,,这里应该是 ComicDataWrapper 而不是 CharacterDataWrapper……
Dialogue: 0,0:16:01.16,0:16:05.78,Default,,0,0,0,,好的，这里也要改
Dialogue: 0,0:16:05.78,0:16:07.68,Default,,0,0,0,,ComicDataWrapper
Dialogue: 0,0:16:10.83,0:16:12.16,Default,,0,0,0,,好了，现在应该搞定了
Dialogue: 0,0:16:17.46,0:16:22.39,Default,,0,0,0,,现在要做的事情大概是我们在这里曾经做过的
Dialogue: 0,0:16:22.39,0:16:25.16,Default,,0,0,0,,这里我们有另一个方法
Dialogue: 0,0:16:25.16,0:16:38.20,Default,,0,0,0,,不过这次我们不需要之前做缩略图一整套那么费劲了
Dialogue: 0,0:16:38.20,0:16:41.16,Default,,0,0,0,,图片可以这样传回来
Dialogue: 0,0:16:41.16,0:16:46.12,Default,,0,0,0,,所以，只要复制这一段，然后改改适配漫画即可
Dialogue: 0,0:16:52.71,0:16:54.69,Default,,0,0,0,,PopulateMarvelComicsAsync
Dialogue: 0,0:16:54.69,0:17:00.45,Default,,0,0,0,,我们需要传入的是 ObservableCollection<Comic>
Dialogue: 0,0:17:02.84,0:17:07.43,Default,,0,0,0,,它现在不叫 MarvelCharacters 了，而是 MarvelComics
Dialogue: 0,0:17:11.72,0:17:13.68,Default,,0,0,0,,这个就会是一个 ComicDataWrapper 了
Dialogue: 0,0:17:13.68,0:17:18.38,Default,,0,0,0,,GetCharacters 应该改成 GetComic
Dialogue: 0,0:17:18.38,0:17:24.63,Default,,0,0,0,,可能复制粘贴后修改这堆引用不值当\N（译注：何止是不值当！）
Dialogue: 0,0:17:24.63,0:17:29.20,Default,,0,0,0,,不过至少我们可以用它保持一致性\N（译注：DRY 才是保持一致性的关键好吧！          审核注：Don't Repeat Yourself ，看向DRY）
Dialogue: 0,0:17:29.20,0:17:32.34,Default,,0,0,0,,(Get)ComicDataWrapperAsync，是这个名字吧？
Dialogue: 0,0:17:32.34,0:17:37.63,Default,,0,0,0,,GetComicDataWrapperAsync，是这个名字
Dialogue: 0,0:17:39.41,0:17:41.12,Default,,0,0,0,,好的，现在传入我们需要的 ID
Dialogue: 0,0:17:41.12,0:17:47.58,Default,,0,0,0,,于是也要传入 ID
Dialogue: 0,0:17:47.58,0:17:51.33,Default,,0,0,0,,所以写 int characterId……
Dialogue: 0,0:17:54.21,0:17:55.67,Default,,0,0,0,,我们要传入 characterId
Dialogue: 0,0:17:58.67,0:17:59.21,Default,,0,0,0,,就这样传
Dialogue: 0,0:17:59.21,0:18:05.99,Default,,0,0,0,,好了，现在 comicDataWrapper.data.results 赋值给 comics
Dialogue: 0,0:18:05.99,0:18:14.30,Default,,0,0,0,,好的，这里我们 foreach (var comic in comics)……
Dialogue: 0,0:18:14.30,0:18:21.46,Default,,0,0,0,,然后改成 comic.thumbnail、ComicCharacter、cmoic.thumbnail.path
Dialogue: 0,0:18:21.46,0:18:24.08,Default,,0,0,0,,我来确认一下这里面的都是对的
Dialogue: 0,0:18:24.08,0:18:26.55,Default,,0,0,0,,还要花一点儿时间过一遍这些
Dialogue: 0,0:18:36.66,0:18:46.91,Default,,0,0,0,,我觉得漫画和角色的东西应该是一致的
Dialogue: 0,0:18:52.05,0:18:53.09,Default,,0,0,0,,很好
Dialogue: 0,0:18:57.75,0:19:01.53,Default,,0,0,0,,好，现在我们要调用
Dialogue: 0,0:19:01.54,0:19:07.98,Default,,0,0,0,,PopulateMarvelComicsAsync 方法\N在一项被选定的时候调用
Dialogue: 0,0:19:09.19,0:19:12.86,Default,,0,0,0,,首先要做的是
Dialogue: 0,0:19:12.86,0:19:16.12,Default,,0,0,0,,要创建一个新的属性
Dialogue: 0,0:19:16.12,0:19:22.36,Default,,0,0,0,,写 prop，按 Tab，再按，然后写 ObservableCollection<Comic>
Dialogue: 0,0:19:22.36,0:19:25.15,Default,,0,0,0,,属性名是 MarvelComics
Dialogue: 0,0:19:29.80,0:19:30.30,Default,,0,0,0,,得嘞
Dialogue: 0,0:19:31.92,0:19:34.06,Default,,0,0,0,,然后就该初始化了
Dialogue: 0,0:19:35.47,0:19:41.23,Default,,0,0,0,,写 MarvelComics = new ObservableCollection<Comic>();
Dialogue: 0,0:19:41.23,0:19:46.60,Default,,0,0,0,,然后应该调用 MarvelComics.Clear()
Dialogue: 0,0:19:46.60,0:19:51.34,Default,,0,0,0,,这样就可以清空之前的项了
Dialogue: 0,0:19:51.34,0:19:54.42,Default,,0,0,0,,然后我再做下一次调用
Dialogue: 0,0:19:54.42,0:20:00.09,Default,,0,0,0,,然后调用方法，传入……
Dialogue: 0,0:20:00.09,0:20:08.73,Default,,0,0,0,,传入角色标识符
Dialogue: 0,0:20:08.73,0:20:13.09,Default,,0,0,0,,写 selectedCharacter.id
Dialogue: 0,0:20:13.09,0:20:19.05,Default,,0,0,0,,然后传入 MarvelComics，就像这样
Dialogue: 0,0:20:19.05,0:20:21.47,Default,,0,0,0,,这里有什么问题捏？
Dialogue: 0,0:20:21.47,0:20:24.17,Default,,0,0,0,,需要加上 async 修饰符
Dialogue: 0,0:20:28.13,0:20:30.63,Default,,0,0,0,,还有什么问题呢？
Dialogue: 0,0:20:30.63,0:20:35.11,Default,,0,0,0,,啊，我可真笨（并不是）
Dialogue: 0,0:20:35.11,0:20:39.30,Default,,0,0,0,,加上“MarvelFacade.”，这就好了
Dialogue: 0,0:20:44.30,0:20:44.88,Default,,0,0,0,,OK
Dialogue: 0,0:20:50.59,0:20:55.72,Default,,0,0,0,,现在既然我要调用这个 API
Dialogue: 0,0:20:55.72,0:21:03.05,Default,,0,0,0,,我或许应该启动不确定进度环（ProgressRing 控件）
Dialogue: 0,0:21:03.05,0:21:11.26,Default,,0,0,0,,在这里启动，在这里停用
Dialogue: 0,0:21:16.59,0:21:19.64,Default,,0,0,0,,好的，看看它能不能用
Dialogue: 0,0:21:19.64,0:21:20.99,Default,,0,0,0,,啊，我可真笨（并不是）
Dialogue: 0,0:21:20.99,0:21:23.05,Default,,0,0,0,,我忘了最重要的部分了！
Dialogue: 0,0:21:31.42,0:21:37.11,Default,,0,0,0,,这里有一个问题：这里已经有了一个 Comic 的定义了
Dialogue: 0,0:21:37.11,0:21:38.33,Default,,0,0,0,,且它和之前的完全不同
Dialogue: 0,0:21:38.33,0:21:42.43,Default,,0,0,0,,所以这里改叫 ComicBook
Dialogue: 0,0:21:42.43,0:21:47.40,Default,,0,0,0,,应该只有这里要相应地改吧？
Dialogue: 0,0:21:47.40,0:21:50.42,Default,,0,0,0,,好吧，看来要改的挺多
Dialogue: 0,0:21:53.43,0:22:00.48,Default,,0,0,0,,每个用到的地方都要改
Dialogue: 0,0:22:00.48,0:22:07.07,Default,,0,0,0,,好在用到的不多
Dialogue: 0,0:22:07.07,0:22:10.55,Default,,0,0,0,,这里要重新考虑一下了
Dialogue: 0,0:22:10.55,0:22:11.93,Default,,0,0,0,,不应该是 Comic，而是 ComicBook
Dialogue: 0,0:22:14.42,0:22:15.83,Default,,0,0,0,,这里也要改
Dialogue: 0,0:22:17.80,0:22:26.35,Default,,0,0,0,,然后传入的 ObservableCollection，应该是 ComicBook 作为泛型参数，而不是 Comic
Dialogue: 0,0:22:26.35,0:22:30.27,Default,,0,0,0,,好，现在可以了吗？还是还是不行？
Dialogue: 0,0:22:32.53,0:22:42.60,Default,,0,0,0,,好，现在在 MainPage.xaml 里面\N我需要绑定到那个新的 MarvelComics 集合
Dialogue: 0,0:22:42.60,0:22:54.76,Default,,0,0,0,,在这儿写
Dialogue: 0,0:22:54.76,0:22:56.92,Default,,0,0,0,,这里写（注释）漫画列表（list of comics）
Dialogue: 0,0:22:59.59,0:23:06.10,Default,,0,0,0,,这里要再来一个 Grid，这个应该是……
Dialogue: 0,0:23:06.10,0:23:10.34,Default,,0,0,0,,呃，应该是一个 GridView
Dialogue: 0,0:23:10.34,0:23:13.52,Default,,0,0,0,,把它放在（父级）Grid 的第 1 行
Dialogue: 0,0:23:13.52,0:23:24.57,Default,,0,0,0,,继续，设置 ItemSource 属性
Dialogue: 0,0:23:24.57,0:23:35.63,Default,,0,0,0,,写 ="｛x:Bind MarvelComics｝"
Dialogue: 0,0:23:38.80,0:23:42.24,Default,,0,0,0,,然后设置 IsItemClickEnabled="true"
Dialogue: 0,0:23:42.24,0:23:44.67,Default,,0,0,0,,一会再回来看
Dialogue: 0,0:23:44.67,0:23:50.17,Default,,0,0,0,,然后还有 ItemClicked= 那个事件处理程序
Dialogue: 0,0:23:50.17,0:23:54.17,Default,,0,0,0,,这个也是一会儿再回来看
Dialogue: 0,0:24:01.38,0:24:05.79,Default,,0,0,0,,好，这里我们要做的是
Dialogue: 0,0:24:05.79,0:24:11.55,Default,,0,0,0,,设置 Gridview.ItemTemplate，它是一个 DataTemplate
Dialogue: 0,0:24:12.90,0:24:17.89,Default,,0,0,0,,这里要显示 ComicBook 的图片
Dialogue: 0,0:24:17.89,0:24:30.45,Default,,0,0,0,,嗯，图片，来设置 x:DataType="Data.ComicBook"
Dialogue: 0,0:24:30.45,0:24:37.30,Default,,0,0,0,,Source 将会是大图的地址
Dialogue: 0,0:24:37.30,0:24:42.06,Default,,0,0,0,,所以写 x:Bind thumnnail.large
Dialogue: 0,0:24:42.06,0:24:45.51,Default,,0,0,0,,然后……
Dialogue: 0,0:24:47.92,0:24:49.13,Default,,0,0,0,,呃，其实应该用小图，small
Dialogue: 0,0:24:49.13,0:24:51.09,Default,,0,0,0,,用小图
Dialogue: 0,0:24:52.59,0:24:56.63,Default,,0,0,0,,不过这让我思考，是不是需要不同大小的呢？
Dialogue: 0,0:24:56.63,0:24:59.30,Default,,0,0,0,,我们一会儿再来思考这问题
Dialogue: 0,0:24:59.30,0:25:04.45,Default,,0,0,0,,我们设置 Width="100" 以及 Height="150"
Dialogue: 0,0:25:04.45,0:25:07.67,Default,,0,0,0,,这样应该就差不多好了
Dialogue: 0,0:25:12.21,0:25:13.80,Default,,0,0,0,,这里都绑定好了
Dialogue: 0,0:25:13.80,0:25:16.45,Default,,0,0,0,,不错
Dialogue: 0,0:25:16.45,0:25:21.93,Default,,0,0,0,,在这个 Facade 这里，当我们放入漫画的时候
Dialogue: 0,0:25:23.10,0:25:29.37,Default,,0,0,0,,我觉得这里可以用不同大小的图
Dialogue: 0,0:25:29.37,0:25:32.09,Default,,0,0,0,,这里无论哪种都用竖版图（portrait）
Dialogue: 0,0:25:32.09,0:25:37.45,Default,,0,0,0,,因为漫画书是竖着排列的而不是……所以
Dialogue: 0,0:25:37.45,0:25:42.38,Default,,0,0,0,,这里用中等大小，然后那里用超大的
Dialogue: 0,0:25:42.38,0:25:44.22,Default,,0,0,0,,好，这样应该就行了
Dialogue: 0,0:25:44.22,0:25:46.01,Default,,0,0,0,,好，生成一个看看行不行
Dialogue: 0,0:25:51.13,0:25:52.01,Default,,0,0,0,,不行
Dialogue: 0,0:26:00.51,0:26:05.11,Default,,0,0,0,,呃，应该只是一个命名问题吧，我看看
Dialogue: 0,0:26:05.11,0:26:07.51,Default,,0,0,0,,（思考ing）
Dialogue: 0,0:26:07.51,0:26:11.84,Default,,0,0,0,,啊，这里应该是 MarvelComics 而不是 ComicBooks
Dialogue: 0,0:26:15.55,0:26:19.54,Default,,0,0,0,,好嘞
Dialogue: 0,0:26:19.54,0:26:23.78,Default,,0,0,0,,好~
Dialogue: 0,0:26:23.78,0:26:24.28,Default,,0,0,0,,戳一下这儿……？
Dialogue: 0,0:26:31.34,0:26:32.07,Default,,0,0,0,,出来了！
Dialogue: 0,0:26:32.07,0:26:33.92,Default,,0,0,0,,啊，多么美丽的画面\N（译注：那画面太美我不敢看）
Dialogue: 0,0:26:39.96,0:26:43.53,Default,,0,0,0,,有的时候似乎获取漫画不太顺利？\N（译注：我们都有不顺利的时候）
Dialogue: 0,0:26:43.53,0:26:45.47,Default,,0,0,0,,原因还是一样的
Dialogue: 0,0:26:45.47,0:26:47.72,Default,,0,0,0,,下一个视频里面我们会修复这个问题
Dialogue: 0,0:26:47.72,0:26:49.23,Default,,0,0,0,,这个已经有点儿长了呢
Dialogue: 0,0:26:49.23,0:26:50.83,Default,,0,0,0,,不过很棒！
Dialogue: 0,0:26:50.83,0:26:54.17,Default,,0,0,0,,好，我们下一个视频再继续
Dialogue: 0,0:26:54.17,0:26:56.25,Default,,0,0,0,,点击这几个中的一个之后，我们会展示
Dialogue: 0,0:26:57.62,0:27:02.20,Default,,0,0,0,,点击的项的信息，并放一个漫画
Dialogue: 0,0:27:02.20,0:27:03.50,Default,,0,0,0,,下节课我们会完成这些
Dialogue: 0,0:27:03.50,0:27:04.48,Default,,0,0,0,,下次再见啦，谢谢！
